{"ast":null,"code":"class AIService{constructor(){this.rateLimitHandler=null;}setRateLimitHandler(handler){this.rateLimitHandler=handler;}async updateAllNPCsWithAI(npcsArray,event,apiConfig){const{apiKey,apiUrl,modelName}=apiConfig;if(!apiKey||apiKey.trim()===''){console.warn('Cerebras API key not configured. Using fallback simulation.');return npcsArray.map(npc=>this.simulateNPCUpdate(npc,event));}// Check rate limit before making API call\nif(this.rateLimitHandler&&!this.rateLimitHandler.checkRateLimit()){console.warn(`Rate limit reached. Using simulation for all NPCs`);return npcsArray.map(npc=>this.simulateNPCUpdate(npc,event));}const prompt=this.buildPrompt(npcsArray,event);try{console.log('Calling Cerebras API with model:',modelName,'for',npcsArray.length,'NPCs');// Increment rate limit counter\nif(this.rateLimitHandler){this.rateLimitHandler.incrementCallCount();}const response=await fetch(apiUrl,{method:'POST',headers:{'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json'},body:JSON.stringify({model:modelName,messages:[{role:\"system\",content:\"You are an expert Game of Thrones NPC simulation engine. Always respond with valid JSON array only.\"},{role:\"user\",content:prompt}],temperature:0.7,max_completion_tokens:8000,top_p:0.8,stream:false})});if(!response.ok){const errorText=await response.text();console.error('API Error Response:',errorText);// Handle rate limit specifically\nif(response.status===429){console.error('Rate limit exceeded! Switching to simulation mode.');if(this.rateLimitHandler){this.rateLimitHandler.setRateLimitError(true);}return npcsArray.map(npc=>this.simulateNPCUpdate(npc,event));}throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);}const responseData=await response.json();const aiResponse=responseData.choices[0].message.content;// Parse the AI response as JSON\ntry{const updatedNpcs=JSON.parse(aiResponse);// Validate that it's an array and has the right length\nif(Array.isArray(updatedNpcs)&&updatedNpcs.length===npcsArray.length){return updatedNpcs;}else{throw new Error('Invalid NPC array structure returned by AI');}}catch(parseError){console.error('Failed to parse AI response as JSON:',parseError);console.log('AI Response:',aiResponse);return npcsArray.map(npc=>this.simulateNPCUpdate(npc,event));}}catch(error){console.error('Error calling Cerebras API:',error);return npcsArray.map(npc=>this.simulateNPCUpdate(npc,event));}}buildPrompt(npcsArray,event){return`You are an expert AI agent simulating NPC evolution in a Game of Thrones universe. Update ALL NPCs in the dataset based on the world event, ensuring changes align with Westerosi lore, politics, and character archetypes. Use the empirical formula: NPC Persona (with current action) × World Event = New Action + Change in Persona.\n\nNPC Dataset (JSON schema-compliant):\n${JSON.stringify(npcsArray,null,2)}\n\nWorld Event:\n${event.title} - ${event.description}\n\nReason step by step:\n1. Assess impact: How does the event affect EACH NPC's house, role, location, status, traits, and relationships? Factor in traits (e.g., high evil amplifies malice, low loyalty risks defection).\n2. New Action: Craft a concise natural language description of updated mood/actions for each NPC, grounded in lore. Use 'current_action' field instead of 'current_behavior'.\n3. Persona Changes: Adjust traits by -20 to +20 max (subtle shifts); modify relationship strengths by -30 to +30 or add/remove if logical; update location/status only if directly implied.\n4. Consistency: Avoid drastic overhauls—events ripple, not revolutionize. Preserve JSON schema integrity.\n5. Process the ENTIRE dataset as a cohesive world where NPCs may interact and influence each other.\n\nOutput ONLY the updated NPC dataset as a JSON array. No extra text.`;}simulateNPCUpdate(npc,event){// Fallback simulation when AI is not available\nconst updatedNpc={...npc};// Simulate trait changes based on event\nif(event.title.includes('dies')||event.title.includes('executed')){updatedNpc.traits.honor=Math.max(0,Math.min(100,updatedNpc.traits.honor+(Math.random()*20-10)));updatedNpc.traits.loyalty=Math.max(0,Math.min(100,updatedNpc.traits.loyalty+(Math.random()*15-5)));updatedNpc.current_action=`Reacting to recent tragic events with ${updatedNpc.traits.honor>70?'righteous anger':'calculated caution'}`;}else if(event.title.includes('war')||event.title.includes('battle')){updatedNpc.traits.ambition=Math.max(0,Math.min(100,updatedNpc.traits.ambition+(Math.random()*15-5)));updatedNpc.current_action=`Preparing for the conflicts ahead with ${updatedNpc.traits.ambition>70?'eager anticipation':'cautious planning'}`;}else{updatedNpc.traits.intelligence=Math.max(0,Math.min(100,updatedNpc.traits.intelligence+(Math.random()*10-5)));updatedNpc.current_action=`Adapting to changing circumstances with ${updatedNpc.traits.intelligence>70?'strategic thinking':'careful observation'}`;}return updatedNpc;}}export default new AIService();","map":{"version":3,"names":["AIService","constructor","rateLimitHandler","setRateLimitHandler","handler","updateAllNPCsWithAI","npcsArray","event","apiConfig","apiKey","apiUrl","modelName","trim","console","warn","map","npc","simulateNPCUpdate","checkRateLimit","prompt","buildPrompt","log","length","incrementCallCount","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","max_completion_tokens","top_p","stream","ok","errorText","text","error","status","setRateLimitError","Error","responseData","json","aiResponse","choices","message","updatedNpcs","parse","Array","isArray","parseError","title","description","updatedNpc","includes","traits","honor","Math","max","min","random","loyalty","current_action","ambition","intelligence"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/services/aiService.js"],"sourcesContent":["class AIService {\n  constructor() {\n    this.rateLimitHandler = null;\n  }\n\n  setRateLimitHandler(handler) {\n    this.rateLimitHandler = handler;\n  }\n\n  async updateAllNPCsWithAI(npcsArray, event, apiConfig) {\n    const { apiKey, apiUrl, modelName } = apiConfig;\n\n    if (!apiKey || apiKey.trim() === '') {\n      console.warn('Cerebras API key not configured. Using fallback simulation.');\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n    \n    // Check rate limit before making API call\n    if (this.rateLimitHandler && !this.rateLimitHandler.checkRateLimit()) {\n      console.warn(`Rate limit reached. Using simulation for all NPCs`);\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n\n    const prompt = this.buildPrompt(npcsArray, event);\n\n    try {\n      console.log('Calling Cerebras API with model:', modelName, 'for', npcsArray.length, 'NPCs');\n      \n      // Increment rate limit counter\n      if (this.rateLimitHandler) {\n        this.rateLimitHandler.incrementCallCount();\n      }\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: modelName,\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are an expert Game of Thrones NPC simulation engine. Always respond with valid JSON array only.\"\n            },\n            {\n              role: \"user\",\n              content: prompt\n            }\n          ],\n          temperature: 0.7,\n          max_completion_tokens: 8000,\n          top_p: 0.8,\n          stream: false\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        \n        // Handle rate limit specifically\n        if (response.status === 429) {\n          console.error('Rate limit exceeded! Switching to simulation mode.');\n          if (this.rateLimitHandler) {\n            this.rateLimitHandler.setRateLimitError(true);\n          }\n          return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n        }\n        \n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const responseData = await response.json();\n      const aiResponse = responseData.choices[0].message.content;\n      \n      // Parse the AI response as JSON\n      try {\n        const updatedNpcs = JSON.parse(aiResponse);\n        // Validate that it's an array and has the right length\n        if (Array.isArray(updatedNpcs) && updatedNpcs.length === npcsArray.length) {\n          return updatedNpcs;\n        } else {\n          throw new Error('Invalid NPC array structure returned by AI');\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response as JSON:', parseError);\n        console.log('AI Response:', aiResponse);\n        return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n      }\n    } catch (error) {\n      console.error('Error calling Cerebras API:', error);\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n  }\n\n  buildPrompt(npcsArray, event) {\n    return `You are an expert AI agent simulating NPC evolution in a Game of Thrones universe. Update ALL NPCs in the dataset based on the world event, ensuring changes align with Westerosi lore, politics, and character archetypes. Use the empirical formula: NPC Persona (with current action) × World Event = New Action + Change in Persona.\n\nNPC Dataset (JSON schema-compliant):\n${JSON.stringify(npcsArray, null, 2)}\n\nWorld Event:\n${event.title} - ${event.description}\n\nReason step by step:\n1. Assess impact: How does the event affect EACH NPC's house, role, location, status, traits, and relationships? Factor in traits (e.g., high evil amplifies malice, low loyalty risks defection).\n2. New Action: Craft a concise natural language description of updated mood/actions for each NPC, grounded in lore. Use 'current_action' field instead of 'current_behavior'.\n3. Persona Changes: Adjust traits by -20 to +20 max (subtle shifts); modify relationship strengths by -30 to +30 or add/remove if logical; update location/status only if directly implied.\n4. Consistency: Avoid drastic overhauls—events ripple, not revolutionize. Preserve JSON schema integrity.\n5. Process the ENTIRE dataset as a cohesive world where NPCs may interact and influence each other.\n\nOutput ONLY the updated NPC dataset as a JSON array. No extra text.`;\n  }\n\n  simulateNPCUpdate(npc, event) {\n    // Fallback simulation when AI is not available\n    const updatedNpc = { ...npc };\n    \n    // Simulate trait changes based on event\n    if (event.title.includes('dies') || event.title.includes('executed')) {\n      updatedNpc.traits.honor = Math.max(0, Math.min(100, updatedNpc.traits.honor + (Math.random() * 20 - 10)));\n      updatedNpc.traits.loyalty = Math.max(0, Math.min(100, updatedNpc.traits.loyalty + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Reacting to recent tragic events with ${updatedNpc.traits.honor > 70 ? 'righteous anger' : 'calculated caution'}`;\n    } else if (event.title.includes('war') || event.title.includes('battle')) {\n      updatedNpc.traits.ambition = Math.max(0, Math.min(100, updatedNpc.traits.ambition + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Preparing for the conflicts ahead with ${updatedNpc.traits.ambition > 70 ? 'eager anticipation' : 'cautious planning'}`;\n    } else {\n      updatedNpc.traits.intelligence = Math.max(0, Math.min(100, updatedNpc.traits.intelligence + (Math.random() * 10 - 5)));\n      updatedNpc.current_action = `Adapting to changing circumstances with ${updatedNpc.traits.intelligence > 70 ? 'strategic thinking' : 'careful observation'}`;\n    }\n\n    return updatedNpc;\n  }\n}\n\nexport default new AIService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}