{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[npcs,setNpcs]=useState([]);const[worldEvents,setWorldEvents]=useState([]);const[currentEventIndex,setCurrentEventIndex]=useState(0);const[isAutoRunning,setIsAutoRunning]=useState(false);const[timerInterval,setTimerInterval]=useState(15);const[customEvent,setCustomEvent]=useState('');const[showConfig,setShowConfig]=useState(false);const[apiConfig,setApiConfig]=useState({apiKey:'',apiUrl:'https://api.cerebras.ai/v1/chat/completions',modelName:'qwen-3-coder-480b'});const[isProcessingEvent,setIsProcessingEvent]=useState(false);const[previousNpcs,setPreviousNpcs]=useState([]);const[flashAnimation,setFlashAnimation]=useState(false);const intervalRef=useRef(null);const[rateLimitError,setRateLimitError]=useState(false);const[apiCallCount,setApiCallCount]=useState(0);const[lastResetTime,setLastResetTime]=useState(Date.now());const rateLimitRef=useRef({calls:0,resetTime:Date.now()});const loadSampleData=useCallback(()=>{// Sample NPCs based on the schema\nconst sampleNpcs=[{id:\"stark_001\",name:\"Ser Gareth of House Stark\",house:\"Stark\",age:34,gender:\"male\",role:\"knight\",traits:{honor:82,loyalty:88,intelligence:65,emotional_intelligence:70,evil:12,selflessness:75,ambition:35,combat_skill:80,political_cunning:45,religious_devotion:65},relationships:[{npc_id:\"stark_002\",relationship_type:\"family\",strength:90},{npc_id:\"stark_015\",relationship_type:\"ally\",strength:75}],current_behavior:\"Patrolling the borders with quiet determination\",location:\"Winterfell\",status:\"alive\"}];const sampleEvents=[{event_id:1,title:\"Lord Jon Arryn of House Arryn dies mysteriously\",description:\"The Hand of the King dies suddenly, creating a power vacuum in King's Landing\",political_context:{house_stark:\"Ned Stark of House Stark reluctantly accepts Hand position, honor compels duty to realm\"},cascading_effects:[\"Power vacuum in King's Landing\",\"Stark family travels south\"]}];setNpcs(sampleNpcs);setWorldEvents(sampleEvents);},[]);const loadDefaultData=useCallback(async()=>{try{// Load NPCs\nconst npcResponse=await fetch('/dataset/npcs_30.json');const npcData=await npcResponse.json();setNpcs(npcData.npcs||[]);// Load World Events\nconst eventsResponse=await fetch('/world_events.json');const eventsData=await eventsResponse.json();setWorldEvents(eventsData.world_events||[]);}catch(error){console.error('Error loading default data:',error);// Fallback to sample data if files not found\nloadSampleData();}},[loadSampleData]);// Load environment variables on component mount\nuseEffect(()=>{const envApiKey=process.env.REACT_APP_CEREBRAS_API_KEY;const envApiUrl=process.env.REACT_APP_CEREBRAS_API_URL;const envModelName=process.env.REACT_APP_MODEL_NAME;if(envApiKey||envApiUrl||envModelName){setApiConfig({apiKey:envApiKey||'',apiUrl:envApiUrl||'https://api.cerebras.ai/v1/chat/completions',modelName:envModelName||'qwen-3-coder-480b'});}},[]);// Load default data on component mount\nuseEffect(()=>{loadDefaultData();},[loadDefaultData]);const loadWorldQuest=async()=>{try{const eventsResponse=await fetch('/world_events.json');const eventsData=await eventsResponse.json();setWorldEvents(eventsData.world_events||[]);setCurrentEventIndex(0);// Reset to first event\nconsole.log('World Quest loaded successfully');}catch(error){console.error('Error loading world events:',error);alert('Failed to load World Quest. Please check if world_events.json exists.');}};const loadPersona=async()=>{try{// Load 30 NPCs by default, with fallbacks to larger datasets\nlet npcResponse;try{npcResponse=await fetch('/dataset/npcs_30.json');}catch{try{npcResponse=await fetch('/dataset/npcs_100.json');}catch{npcResponse=await fetch('/dataset/npcs_300.json');}}const npcData=await npcResponse.json();setNpcs(npcData.npcs||npcData||[]);console.log('Persona data loaded successfully');}catch(error){console.error('Error loading persona data:',error);alert('Failed to load Persona data. Please check if NPC files exist.');}};const restartWorld=()=>{setCurrentEventIndex(0);setIsAutoRunning(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}console.log('World restarted - reset to first event');};const checkRateLimit=()=>{const now=Date.now();const oneMinute=60*1000;// Reset counter every minute\nif(now-rateLimitRef.current.resetTime>oneMinute){rateLimitRef.current.calls=0;rateLimitRef.current.resetTime=now;setApiCallCount(0);setLastResetTime(now);setRateLimitError(false);}// Check if we're at the limit (9 calls to leave buffer)\nif(rateLimitRef.current.calls>=9){setRateLimitError(true);return false;}return true;};const updateAllNPCsWithAI=async(npcsArray,event)=>{const{apiKey,apiUrl,modelName}=apiConfig;if(!apiKey||apiKey.trim()===''){console.warn('Cerebras API key not configured. Using fallback simulation.');return npcsArray.map(npc=>simulateNPCUpdate(npc,event));}// Check rate limit before making API call\nif(!checkRateLimit()){console.warn(`Rate limit reached (${rateLimitRef.current.calls}/10 calls per minute). Using simulation for all NPCs`);return npcsArray.map(npc=>simulateNPCUpdate(npc,event));}const prompt=`You are an expert AI agent simulating NPC evolution in a Game of Thrones universe. Update ALL NPCs in the dataset based on the world event, ensuring changes align with Westerosi lore, politics, and character archetypes. Use the empirical formula: NPC Persona (with current action) × World Event = New Action + Change in Persona.\n\nNPC Dataset (JSON schema-compliant):\n${JSON.stringify(npcsArray,null,2)}\n\nWorld Event:\n${event.title} - ${event.description}\n\nReason step by step:\n1. Assess impact: How does the event affect EACH NPC's house, role, location, status, traits, and relationships? Factor in traits (e.g., high evil amplifies malice, low loyalty risks defection).\n2. New Action: Craft a concise natural language description of updated mood/actions for each NPC, grounded in lore. Use 'current_action' field instead of 'current_behavior'.\n3. Persona Changes: Adjust traits by -20 to +20 max (subtle shifts); modify relationship strengths by -30 to +30 or add/remove if logical; update location/status only if directly implied.\n4. Consistency: Avoid drastic overhauls—events ripple, not revolutionize. Preserve JSON schema integrity.\n5. Process the ENTIRE dataset as a cohesive world where NPCs may interact and influence each other.\n\nOutput ONLY the updated NPC dataset as a JSON array. No extra text.`;try{console.log('Calling Cerebras API with model:',modelName,'for',npcsArray.length,'NPCs');// Increment rate limit counter\nrateLimitRef.current.calls++;setApiCallCount(rateLimitRef.current.calls);const response=await fetch(apiUrl,{method:'POST',headers:{'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json'},body:JSON.stringify({model:modelName,messages:[{role:\"system\",content:\"You are an expert Game of Thrones NPC simulation engine. Always respond with valid JSON array only.\"},{role:\"user\",content:prompt}],temperature:0.7,max_completion_tokens:8000,top_p:0.8,stream:false})});if(!response.ok){const errorText=await response.text();console.error('API Error Response:',errorText);// Handle rate limit specifically\nif(response.status===429){console.error('Rate limit exceeded! Switching to simulation mode.');setRateLimitError(true);return npcsArray.map(npc=>simulateNPCUpdate(npc,event));}throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);}const responseData=await response.json();const aiResponse=responseData.choices[0].message.content;// Parse the AI response as JSON\ntry{const updatedNpcs=JSON.parse(aiResponse);// Validate that it's an array and has the right length\nif(Array.isArray(updatedNpcs)&&updatedNpcs.length===npcsArray.length){return updatedNpcs;}else{throw new Error('Invalid NPC array structure returned by AI');}}catch(parseError){console.error('Failed to parse AI response as JSON:',parseError);console.log('AI Response:',aiResponse);return npcsArray.map(npc=>simulateNPCUpdate(npc,event));}}catch(error){console.error('Error calling Cerebras API:',error);return npcsArray.map(npc=>simulateNPCUpdate(npc,event));}};const updateNPCWithAI=async(npc,event)=>{// Legacy function for backward compatibility - now just calls simulation\nreturn simulateNPCUpdate(npc,event);};const simulateNPCUpdate=(npc,event)=>{// Fallback simulation when AI is not available\nconst updatedNpc={...npc};// Simulate trait changes based on event\nif(event.title.includes('dies')||event.title.includes('executed')){updatedNpc.traits.honor=Math.max(0,Math.min(100,updatedNpc.traits.honor+(Math.random()*20-10)));updatedNpc.traits.loyalty=Math.max(0,Math.min(100,updatedNpc.traits.loyalty+(Math.random()*15-5)));updatedNpc.current_action=`Reacting to recent tragic events with ${updatedNpc.traits.honor>70?'righteous anger':'calculated caution'}`;}else if(event.title.includes('war')||event.title.includes('battle')){updatedNpc.traits.ambition=Math.max(0,Math.min(100,updatedNpc.traits.ambition+(Math.random()*15-5)));updatedNpc.current_action=`Preparing for the conflicts ahead with ${updatedNpc.traits.ambition>70?'eager anticipation':'cautious planning'}`;}else{updatedNpc.traits.intelligence=Math.max(0,Math.min(100,updatedNpc.traits.intelligence+(Math.random()*10-5)));updatedNpc.current_action=`Adapting to changing circumstances with ${updatedNpc.traits.intelligence>70?'strategic thinking':'careful observation'}`;}return updatedNpc;};const processNextEvent=async()=>{if(currentEventIndex>=worldEvents.length){setIsAutoRunning(false);return;}// Start loading animation\nsetIsProcessingEvent(true);// Store previous NPC data before updating\nsetPreviousNpcs([...npcs]);const currentEvent=worldEvents[currentEventIndex];console.log(`Processing event: ${currentEvent.title}`);console.log(`Current API calls this minute: ${rateLimitRef.current.calls}/10`);// Use the new batch processing function - processes entire dataset in single call\nconst updatedNpcs=await updateAllNPCsWithAI(npcs,currentEvent);console.log(`Event completed. Processed ${npcs.length} NPCs in single API call`);// Update NPCs and trigger flash animation\nsetNpcs(updatedNpcs);setCurrentEventIndex(prev=>prev+1);// End loading animation\nsetIsProcessingEvent(false);// Trigger flash animation for new data\nsetFlashAnimation(true);setTimeout(()=>setFlashAnimation(false),1000);};const startAutoRun=()=>{setIsAutoRunning(true);intervalRef.current=setInterval(()=>{processNextEvent();},timerInterval*1000);};const stopAutoRun=()=>{setIsAutoRunning(false);if(intervalRef.current){clearInterval(intervalRef.current);}};const sendCustomEvent=async()=>{if(!customEvent.trim())return;const event={event_id:999,title:customEvent,description:\"Custom event triggered by user\",political_context:{},cascading_effects:[]};// Start loading animation\nsetIsProcessingEvent(true);// Store previous NPC data before updating\nsetPreviousNpcs([...npcs]);console.log(`Processing custom event: ${customEvent}`);console.log(`Current API calls this minute: ${rateLimitRef.current.calls}/10`);// Use the new batch processing function - processes entire dataset in single call\nconst updatedNpcsFromCustomEvent=await updateAllNPCsWithAI(npcs,event);console.log(`Custom event completed. Processed ${npcs.length} NPCs in single API call`);setNpcs(updatedNpcsFromCustomEvent);setCustomEvent('');// End loading animation\nsetIsProcessingEvent(false);// Trigger flash animation for new data\nsetFlashAnimation(true);setTimeout(()=>setFlashAnimation(false),1000);};const formatNPCDisplay=npc=>{const traits=npc.traits;const relationships=npc.relationships||[];const relationshipText=relationships.map(rel=>`👨‍👦 ${rel.npc_id} ${rel.relationship_type} Str${rel.strength}`).join(' ')||'';const genderIcon=npc.gender==='male'?'👨M':'👩F';const houseShort=npc.house.replace('House ','');const houseLower=houseShort.toLowerCase();// Find previous data for this NPC\nconst previousNpc=previousNpcs.find(prevNpc=>prevNpc.id===npc.id);const formatTooltipData=npcData=>{if(!npcData)return'No previous data available';const prevTraits=npcData.traits;return`Previous State:\\nHonor: ${prevTraits.honor} Loyal: ${prevTraits.loyalty} IQ: ${prevTraits.intelligence} EQ: ${prevTraits.emotional_intelligence}\\nEvil: ${prevTraits.evil} Selfless: ${prevTraits.selflessness} Ambition: ${prevTraits.ambition}\\nCombat: ${prevTraits.combat_skill} Political: ${prevTraits.political_cunning} Religion: ${prevTraits.religious_devotion}\\nLocation: ${npcData.location||'Unknown'} Status: ${npcData.status}\\nBehavior: ${npcData.current_action||npcData.current_behavior||'Idle'}`;};return/*#__PURE__*/_jsxs(\"div\",{className:`npc-card-two-line npc-card-${houseLower}`,title:formatTooltipData(previousNpc),children:[/*#__PURE__*/_jsx(\"img\",{src:`/${houseLower}.png`,alt:`${houseShort} sigil`,className:\"npc-house-image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"npc-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"npc-line-1\",children:[\"id: \",npc.id,\" name: \",npc.name,\" \\uD83C\\uDFE0 \",houseShort,\" \\uD83D\\uDD1E\",npc.age,\" \",genderIcon,\" \\uD83D\\uDCBC \",npc.role,\" | Honor: \",traits.honor,\" Loyal: \",traits.loyalty,\" IQ: \",traits.intelligence,\" EQ: \",traits.emotional_intelligence,\" Evil: \",traits.evil,\" Selfless: \",traits.selflessness,\" Ambition: \",traits.ambition,\" Combat: \",traits.combat_skill,\" Political: \",traits.political_cunning,\" Religion: \",traits.religious_devotion,\" \",relationshipText]}),/*#__PURE__*/_jsxs(\"div\",{className:\"npc-line-2\",children:[\"\\uD83C\\uDF0D \",npc.location||'Unknown',\" \\uD83D\\uDFE2 \",npc.status,\" Current_Behavior: \",npc.current_action||npc.current_behavior||'Idle']})]})]},npc.id);};const getGroupedStats=()=>{const houseStats={};const genderStats={};const locationStats={};npcs.forEach(npc=>{const house=npc.house.replace('House ','');houseStats[house]=(houseStats[house]||0)+1;genderStats[npc.gender]=(genderStats[npc.gender]||0)+1;const location=npc.location||'Unknown';locationStats[location]=(locationStats[location]||0)+1;});return{houseStats,genderStats,locationStats};};const{houseStats,genderStats,locationStats}=getGroupedStats();return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Live NPC Engine\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:loadWorldQuest,className:\"load-btn\",children:\"\\uD83D\\uDCDC Load World Quest\"}),/*#__PURE__*/_jsx(\"button\",{onClick:loadPersona,className:\"load-btn\",children:\"\\uD83D\\uDC65 Load Persona\"}),/*#__PURE__*/_jsx(\"button\",{onClick:restartWorld,className:\"restart-btn\",children:\"\\uD83D\\uDD04 Restart World\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowConfig(true),className:\"config-btn\",children:\"\\u2699\\uFE0F AI Engine Config\"})]})]}),showConfig&&/*#__PURE__*/_jsx(\"div\",{className:\"config-modal\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"config-content\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"AI Engine Configuration\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"config-field\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Cerebras API Key:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:apiConfig.apiKey,onChange:e=>setApiConfig({...apiConfig,apiKey:e.target.value}),placeholder:\"Enter your Cerebras API key\",className:\"config-input\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-field\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"API URL:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:apiConfig.apiUrl,onChange:e=>setApiConfig({...apiConfig,apiUrl:e.target.value}),className:\"config-input\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-field\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Model Name:\"}),/*#__PURE__*/_jsxs(\"select\",{value:apiConfig.modelName,onChange:e=>setApiConfig({...apiConfig,modelName:e.target.value}),className:\"config-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"qwen-3-coder-480b\",children:\"Qwen 3 Coder 480B (Default)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"qwen-3-235b-a22b-instruct-2507\",children:\"Qwen 3 235B A22B Instruct 2507\"}),/*#__PURE__*/_jsx(\"option\",{value:\"qwen-3-235b-a22b-thinking-2507\",children:\"Qwen 3 235B A22B Thinking 2507\"}),/*#__PURE__*/_jsx(\"option\",{value:\"llama-3.3-70b\",children:\"Llama 3.3 70B\"}),/*#__PURE__*/_jsx(\"option\",{value:\"qwen-3-32b\",children:\"Qwen 3 32B\"}),/*#__PURE__*/_jsx(\"option\",{value:\"deepseek-r1-distill-llama-70b\",children:\"DeepSeek R1 Distill Llama 70B\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"config-status\",children:apiConfig.apiKey?/*#__PURE__*/_jsx(\"span\",{className:\"status-connected\",children:\"\\uD83D\\uDFE2 API Key Configured\"}):/*#__PURE__*/_jsx(\"span\",{className:\"status-disconnected\",children:\"\\uD83D\\uDD34 API Key Required\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowConfig(false),className:\"config-save-btn\",children:\"Save & Close\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowConfig(false),className:\"config-cancel-btn\",children:\"Cancel\"})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left-panel\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"NPCs (\",npcs.length,\")\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-display\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-group\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Houses:\"}),\" \",Object.entries(houseStats).map(_ref=>{let[house,count]=_ref;return`${house}(${count})`;}).join(', ')]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-group\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Gender:\"}),\" \",Object.entries(genderStats).map(_ref2=>{let[gender,count]=_ref2;return`${gender}(${count})`;}).join(', ')]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-group\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Locations:\"}),\" \",Object.entries(locationStats).map(_ref3=>{let[location,count]=_ref3;return`${location}(${count})`;}).join(', ')]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat-group rate-limit-status\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"API Usage:\"}),/*#__PURE__*/_jsxs(\"span\",{className:rateLimitError?'rate-limit-error':apiCallCount>=7?'rate-limit-warning':'rate-limit-ok',children:[apiCallCount,\"/10 calls this minute\"]}),rateLimitError&&/*#__PURE__*/_jsx(\"span\",{className:\"rate-limit-message\",children:\" \\u26A0\\uFE0F Rate limit reached - using simulation mode\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:`npc-list ${flashAnimation?'flash-animation':''}`,children:npcs.map(npc=>formatNPCDisplay(npc))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"right-panel\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"world-events-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"World Events\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"event-controls\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"timer-controls\",children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Auto Timer:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:timerInterval,onChange:e=>setTimerInterval(parseInt(e.target.value)),min:\"5\",max:\"300\"}),\" sec\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>{if(currentEventIndex===0){processNextEvent();}},className:\"manual-start-btn\",children:\"\\uD83D\\uDE80 Manual Start Event\"}),!isAutoRunning?/*#__PURE__*/_jsx(\"button\",{onClick:startAutoRun,className:\"start-btn\",children:\"\\u25B6\\uFE0F Auto Events\"}):/*#__PURE__*/_jsx(\"button\",{onClick:stopAutoRun,className:\"stop-btn\",children:\"\\u23F8\\uFE0F Pause Auto\"}),/*#__PURE__*/_jsx(\"button\",{onClick:processNextEvent,className:\"next-btn\",children:\"\\u23ED\\uFE0F Next Event\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"custom-event\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Custom event...\",value:customEvent,onChange:e=>setCustomEvent(e.target.value),className:\"custom-event-input\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendCustomEvent,className:\"send-btn\",children:\"\\uD83D\\uDCE4 Send\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"events-stack\",style:{position:'relative'},children:[isProcessingEvent&&/*#__PURE__*/_jsxs(\"div\",{className:\"loading-overlay\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"div\",{className:\"loading-text\",children:\"Executing World Event...\"})]}),worldEvents.map((event,index)=>{let statusClass='event-pending';if(index<currentEventIndex){statusClass='event-completed';}else if(index===currentEventIndex){statusClass='event-running';}return/*#__PURE__*/_jsxs(\"div\",{className:`event-card-stack ${statusClass}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"event-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"event-number\",children:[\"#\",event.event_id]}),/*#__PURE__*/_jsx(\"span\",{className:\"event-status-indicator\",children:index<currentEventIndex?'✅':index===currentEventIndex?'🔄':'⏳'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"event-title\",children:event.title}),/*#__PURE__*/_jsx(\"div\",{className:\"event-description\",children:event.description})]},event.event_id);})]})]})})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsx","_jsx","jsxs","_jsxs","App","npcs","setNpcs","worldEvents","setWorldEvents","currentEventIndex","setCurrentEventIndex","isAutoRunning","setIsAutoRunning","timerInterval","setTimerInterval","customEvent","setCustomEvent","showConfig","setShowConfig","apiConfig","setApiConfig","apiKey","apiUrl","modelName","isProcessingEvent","setIsProcessingEvent","previousNpcs","setPreviousNpcs","flashAnimation","setFlashAnimation","intervalRef","rateLimitError","setRateLimitError","apiCallCount","setApiCallCount","lastResetTime","setLastResetTime","Date","now","rateLimitRef","calls","resetTime","loadSampleData","sampleNpcs","id","name","house","age","gender","role","traits","honor","loyalty","intelligence","emotional_intelligence","evil","selflessness","ambition","combat_skill","political_cunning","religious_devotion","relationships","npc_id","relationship_type","strength","current_behavior","location","status","sampleEvents","event_id","title","description","political_context","house_stark","cascading_effects","loadDefaultData","npcResponse","fetch","npcData","json","eventsResponse","eventsData","world_events","error","console","envApiKey","process","env","REACT_APP_CEREBRAS_API_KEY","envApiUrl","REACT_APP_CEREBRAS_API_URL","envModelName","REACT_APP_MODEL_NAME","loadWorldQuest","log","alert","loadPersona","restartWorld","current","clearInterval","checkRateLimit","oneMinute","updateAllNPCsWithAI","npcsArray","event","trim","warn","map","npc","simulateNPCUpdate","prompt","JSON","stringify","length","response","method","headers","body","model","messages","content","temperature","max_completion_tokens","top_p","stream","ok","errorText","text","Error","responseData","aiResponse","choices","message","updatedNpcs","parse","Array","isArray","parseError","updateNPCWithAI","updatedNpc","includes","Math","max","min","random","current_action","processNextEvent","currentEvent","prev","setTimeout","startAutoRun","setInterval","stopAutoRun","sendCustomEvent","updatedNpcsFromCustomEvent","formatNPCDisplay","relationshipText","rel","join","genderIcon","houseShort","replace","houseLower","toLowerCase","previousNpc","find","prevNpc","formatTooltipData","prevTraits","className","children","src","alt","getGroupedStats","houseStats","genderStats","locationStats","forEach","onClick","type","value","onChange","e","target","placeholder","Object","entries","_ref","count","_ref2","_ref3","parseInt","style","position","index","statusClass"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const [npcs, setNpcs] = useState([]);\n  const [worldEvents, setWorldEvents] = useState([]);\n  const [currentEventIndex, setCurrentEventIndex] = useState(0);\n  const [isAutoRunning, setIsAutoRunning] = useState(false);\n  const [timerInterval, setTimerInterval] = useState(15);\n  const [customEvent, setCustomEvent] = useState('');\n  const [showConfig, setShowConfig] = useState(false);\n  const [apiConfig, setApiConfig] = useState({\n    apiKey: '',\n    apiUrl: 'https://api.cerebras.ai/v1/chat/completions',\n    modelName: 'qwen-3-coder-480b'\n  });\n  const [isProcessingEvent, setIsProcessingEvent] = useState(false);\n  const [previousNpcs, setPreviousNpcs] = useState([]);\n  const [flashAnimation, setFlashAnimation] = useState(false);\n  const intervalRef = useRef(null);\n  const [rateLimitError, setRateLimitError] = useState(false);\n  const [apiCallCount, setApiCallCount] = useState(0);\n  const [lastResetTime, setLastResetTime] = useState(Date.now());\n  const rateLimitRef = useRef({ calls: 0, resetTime: Date.now() });\n\n  const loadSampleData = useCallback(() => {\n    // Sample NPCs based on the schema\n    const sampleNpcs = [\n      {\n        id: \"stark_001\",\n        name: \"Ser Gareth of House Stark\",\n        house: \"Stark\",\n        age: 34,\n        gender: \"male\",\n        role: \"knight\",\n        traits: {\n          honor: 82,\n          loyalty: 88,\n          intelligence: 65,\n          emotional_intelligence: 70,\n          evil: 12,\n          selflessness: 75,\n          ambition: 35,\n          combat_skill: 80,\n          political_cunning: 45,\n          religious_devotion: 65\n        },\n        relationships: [\n          { npc_id: \"stark_002\", relationship_type: \"family\", strength: 90 },\n          { npc_id: \"stark_015\", relationship_type: \"ally\", strength: 75 }\n        ],\n        current_behavior: \"Patrolling the borders with quiet determination\",\n        location: \"Winterfell\",\n        status: \"alive\"\n      }\n    ];\n\n    const sampleEvents = [\n      {\n        event_id: 1,\n        title: \"Lord Jon Arryn of House Arryn dies mysteriously\",\n        description: \"The Hand of the King dies suddenly, creating a power vacuum in King's Landing\",\n        political_context: {\n          house_stark: \"Ned Stark of House Stark reluctantly accepts Hand position, honor compels duty to realm\"\n        },\n        cascading_effects: [\"Power vacuum in King's Landing\", \"Stark family travels south\"]\n      }\n    ];\n\n    setNpcs(sampleNpcs);\n    setWorldEvents(sampleEvents);\n  }, []);\n\n  const loadDefaultData = useCallback(async () => {\n    try {\n      // Load NPCs\n      const npcResponse = await fetch('/dataset/npcs_30.json');\n      const npcData = await npcResponse.json();\n      setNpcs(npcData.npcs || []);\n\n      // Load World Events\n      const eventsResponse = await fetch('/world_events.json');\n      const eventsData = await eventsResponse.json();\n      setWorldEvents(eventsData.world_events || []);\n    } catch (error) {\n      console.error('Error loading default data:', error);\n      // Fallback to sample data if files not found\n      loadSampleData();\n    }\n  }, [loadSampleData]);\n\n  // Load environment variables on component mount\n  useEffect(() => {\n    const envApiKey = process.env.REACT_APP_CEREBRAS_API_KEY;\n    const envApiUrl = process.env.REACT_APP_CEREBRAS_API_URL;\n    const envModelName = process.env.REACT_APP_MODEL_NAME;\n    \n    if (envApiKey || envApiUrl || envModelName) {\n      setApiConfig({\n        apiKey: envApiKey || '',\n        apiUrl: envApiUrl || 'https://api.cerebras.ai/v1/chat/completions',\n        modelName: envModelName || 'qwen-3-coder-480b'\n      });\n    }\n  }, []);\n\n  // Load default data on component mount\n  useEffect(() => {\n    loadDefaultData();\n  }, [loadDefaultData]);\n\n  const loadWorldQuest = async () => {\n    try {\n      const eventsResponse = await fetch('/world_events.json');\n      const eventsData = await eventsResponse.json();\n      setWorldEvents(eventsData.world_events || []);\n      setCurrentEventIndex(0); // Reset to first event\n      console.log('World Quest loaded successfully');\n    } catch (error) {\n      console.error('Error loading world events:', error);\n      alert('Failed to load World Quest. Please check if world_events.json exists.');\n    }\n  };\n\n  const loadPersona = async () => {\n    try {\n      // Load 30 NPCs by default, with fallbacks to larger datasets\n      let npcResponse;\n      try {\n        npcResponse = await fetch('/dataset/npcs_30.json');\n      } catch {\n        try {\n          npcResponse = await fetch('/dataset/npcs_100.json');\n        } catch {\n          npcResponse = await fetch('/dataset/npcs_300.json');\n        }\n      }\n      const npcData = await npcResponse.json();\n      setNpcs(npcData.npcs || npcData || []);\n      console.log('Persona data loaded successfully');\n    } catch (error) {\n      console.error('Error loading persona data:', error);\n      alert('Failed to load Persona data. Please check if NPC files exist.');\n    }\n  };\n\n  const restartWorld = () => {\n    setCurrentEventIndex(0);\n    setIsAutoRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    console.log('World restarted - reset to first event');\n  };\n\n  const checkRateLimit = () => {\n    const now = Date.now();\n    const oneMinute = 60 * 1000;\n    \n    // Reset counter every minute\n    if (now - rateLimitRef.current.resetTime > oneMinute) {\n      rateLimitRef.current.calls = 0;\n      rateLimitRef.current.resetTime = now;\n      setApiCallCount(0);\n      setLastResetTime(now);\n      setRateLimitError(false);\n    }\n    \n    // Check if we're at the limit (9 calls to leave buffer)\n    if (rateLimitRef.current.calls >= 9) {\n      setRateLimitError(true);\n      return false;\n    }\n    \n    return true;\n  };\n\n  const updateAllNPCsWithAI = async (npcsArray, event) => {\n    const { apiKey, apiUrl, modelName } = apiConfig;\n\n    if (!apiKey || apiKey.trim() === '') {\n      console.warn('Cerebras API key not configured. Using fallback simulation.');\n      return npcsArray.map(npc => simulateNPCUpdate(npc, event));\n    }\n    \n    // Check rate limit before making API call\n    if (!checkRateLimit()) {\n      console.warn(`Rate limit reached (${rateLimitRef.current.calls}/10 calls per minute). Using simulation for all NPCs`);\n      return npcsArray.map(npc => simulateNPCUpdate(npc, event));\n    }\n\n    const prompt = `You are an expert AI agent simulating NPC evolution in a Game of Thrones universe. Update ALL NPCs in the dataset based on the world event, ensuring changes align with Westerosi lore, politics, and character archetypes. Use the empirical formula: NPC Persona (with current action) × World Event = New Action + Change in Persona.\n\nNPC Dataset (JSON schema-compliant):\n${JSON.stringify(npcsArray, null, 2)}\n\nWorld Event:\n${event.title} - ${event.description}\n\nReason step by step:\n1. Assess impact: How does the event affect EACH NPC's house, role, location, status, traits, and relationships? Factor in traits (e.g., high evil amplifies malice, low loyalty risks defection).\n2. New Action: Craft a concise natural language description of updated mood/actions for each NPC, grounded in lore. Use 'current_action' field instead of 'current_behavior'.\n3. Persona Changes: Adjust traits by -20 to +20 max (subtle shifts); modify relationship strengths by -30 to +30 or add/remove if logical; update location/status only if directly implied.\n4. Consistency: Avoid drastic overhauls—events ripple, not revolutionize. Preserve JSON schema integrity.\n5. Process the ENTIRE dataset as a cohesive world where NPCs may interact and influence each other.\n\nOutput ONLY the updated NPC dataset as a JSON array. No extra text.`;\n\n    try {\n      console.log('Calling Cerebras API with model:', modelName, 'for', npcsArray.length, 'NPCs');\n      \n      // Increment rate limit counter\n      rateLimitRef.current.calls++;\n      setApiCallCount(rateLimitRef.current.calls);\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: modelName,\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are an expert Game of Thrones NPC simulation engine. Always respond with valid JSON array only.\"\n            },\n            {\n              role: \"user\",\n              content: prompt\n            }\n          ],\n          temperature: 0.7,\n          max_completion_tokens: 8000,\n          top_p: 0.8,\n          stream: false\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        \n        // Handle rate limit specifically\n        if (response.status === 429) {\n          console.error('Rate limit exceeded! Switching to simulation mode.');\n          setRateLimitError(true);\n          return npcsArray.map(npc => simulateNPCUpdate(npc, event));\n        }\n        \n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const responseData = await response.json();\n      const aiResponse = responseData.choices[0].message.content;\n      \n      // Parse the AI response as JSON\n      try {\n        const updatedNpcs = JSON.parse(aiResponse);\n        // Validate that it's an array and has the right length\n        if (Array.isArray(updatedNpcs) && updatedNpcs.length === npcsArray.length) {\n          return updatedNpcs;\n        } else {\n          throw new Error('Invalid NPC array structure returned by AI');\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response as JSON:', parseError);\n        console.log('AI Response:', aiResponse);\n        return npcsArray.map(npc => simulateNPCUpdate(npc, event));\n      }\n    } catch (error) {\n      console.error('Error calling Cerebras API:', error);\n      return npcsArray.map(npc => simulateNPCUpdate(npc, event));\n    }\n  };\n\n  const updateNPCWithAI = async (npc, event) => {\n    // Legacy function for backward compatibility - now just calls simulation\n    return simulateNPCUpdate(npc, event);\n  };\n\n  const simulateNPCUpdate = (npc, event) => {\n    // Fallback simulation when AI is not available\n    const updatedNpc = { ...npc };\n    \n    // Simulate trait changes based on event\n    if (event.title.includes('dies') || event.title.includes('executed')) {\n      updatedNpc.traits.honor = Math.max(0, Math.min(100, updatedNpc.traits.honor + (Math.random() * 20 - 10)));\n      updatedNpc.traits.loyalty = Math.max(0, Math.min(100, updatedNpc.traits.loyalty + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Reacting to recent tragic events with ${updatedNpc.traits.honor > 70 ? 'righteous anger' : 'calculated caution'}`;\n    } else if (event.title.includes('war') || event.title.includes('battle')) {\n      updatedNpc.traits.ambition = Math.max(0, Math.min(100, updatedNpc.traits.ambition + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Preparing for the conflicts ahead with ${updatedNpc.traits.ambition > 70 ? 'eager anticipation' : 'cautious planning'}`;\n    } else {\n      updatedNpc.traits.intelligence = Math.max(0, Math.min(100, updatedNpc.traits.intelligence + (Math.random() * 10 - 5)));\n      updatedNpc.current_action = `Adapting to changing circumstances with ${updatedNpc.traits.intelligence > 70 ? 'strategic thinking' : 'careful observation'}`;\n    }\n\n    return updatedNpc;\n  };\n\n  const processNextEvent = async () => {\n    if (currentEventIndex >= worldEvents.length) {\n      setIsAutoRunning(false);\n      return;\n    }\n\n    // Start loading animation\n    setIsProcessingEvent(true);\n    \n    // Store previous NPC data before updating\n    setPreviousNpcs([...npcs]);\n\n    const currentEvent = worldEvents[currentEventIndex];\n\n    console.log(`Processing event: ${currentEvent.title}`);\n    console.log(`Current API calls this minute: ${rateLimitRef.current.calls}/10`);\n\n    // Use the new batch processing function - processes entire dataset in single call\n    const updatedNpcs = await updateAllNPCsWithAI(npcs, currentEvent);\n    \n    console.log(`Event completed. Processed ${npcs.length} NPCs in single API call`);\n\n    // Update NPCs and trigger flash animation\n    setNpcs(updatedNpcs);\n    setCurrentEventIndex(prev => prev + 1);\n    \n    // End loading animation\n    setIsProcessingEvent(false);\n    \n    // Trigger flash animation for new data\n    setFlashAnimation(true);\n    setTimeout(() => setFlashAnimation(false), 1000);\n  };\n\n  const startAutoRun = () => {\n    setIsAutoRunning(true);\n    intervalRef.current = setInterval(() => {\n      processNextEvent();\n    }, timerInterval * 1000);\n  };\n\n  const stopAutoRun = () => {\n    setIsAutoRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  const sendCustomEvent = async () => {\n    if (!customEvent.trim()) return;\n\n    const event = {\n      event_id: 999,\n      title: customEvent,\n      description: \"Custom event triggered by user\",\n      political_context: {},\n      cascading_effects: []\n    };\n\n    // Start loading animation\n    setIsProcessingEvent(true);\n    \n    // Store previous NPC data before updating\n    setPreviousNpcs([...npcs]);\n\n    console.log(`Processing custom event: ${customEvent}`);\n    console.log(`Current API calls this minute: ${rateLimitRef.current.calls}/10`);\n\n    // Use the new batch processing function - processes entire dataset in single call\n    const updatedNpcsFromCustomEvent = await updateAllNPCsWithAI(npcs, event);\n    \n    console.log(`Custom event completed. Processed ${npcs.length} NPCs in single API call`);\n\n    setNpcs(updatedNpcsFromCustomEvent);\n    setCustomEvent('');\n    \n    // End loading animation\n    setIsProcessingEvent(false);\n    \n    // Trigger flash animation for new data\n    setFlashAnimation(true);\n    setTimeout(() => setFlashAnimation(false), 1000);\n  };\n\n  const formatNPCDisplay = (npc) => {\n    const traits = npc.traits;\n    const relationships = npc.relationships || [];\n    const relationshipText = relationships\n      .map(rel => `👨‍👦 ${rel.npc_id} ${rel.relationship_type} Str${rel.strength}`)\n      .join(' ') || '';\n    \n    const genderIcon = npc.gender === 'male' ? '👨M' : '👩F';\n    const houseShort = npc.house.replace('House ', '');\n    const houseLower = houseShort.toLowerCase();\n    \n    // Find previous data for this NPC\n    const previousNpc = previousNpcs.find(prevNpc => prevNpc.id === npc.id);\n    \n    const formatTooltipData = (npcData) => {\n      if (!npcData) return 'No previous data available';\n      const prevTraits = npcData.traits;\n      return `Previous State:\\nHonor: ${prevTraits.honor} Loyal: ${prevTraits.loyalty} IQ: ${prevTraits.intelligence} EQ: ${prevTraits.emotional_intelligence}\\nEvil: ${prevTraits.evil} Selfless: ${prevTraits.selflessness} Ambition: ${prevTraits.ambition}\\nCombat: ${prevTraits.combat_skill} Political: ${prevTraits.political_cunning} Religion: ${prevTraits.religious_devotion}\\nLocation: ${npcData.location || 'Unknown'} Status: ${npcData.status}\\nBehavior: ${npcData.current_action || npcData.current_behavior || 'Idle'}`;\n    };\n    \n    return (\n      <div \n        key={npc.id} \n        className={`npc-card-two-line npc-card-${houseLower}`}\n        title={formatTooltipData(previousNpc)}\n      >\n        <img \n          src={`/${houseLower}.png`} \n          alt={`${houseShort} sigil`}\n          className=\"npc-house-image\"\n        />\n        <div className=\"npc-content\">\n          <div className=\"npc-line-1\">\n            id: {npc.id} name: {npc.name} 🏠 {houseShort} 🔞{npc.age} {genderIcon} 💼 {npc.role} | Honor: {traits.honor} Loyal: {traits.loyalty} IQ: {traits.intelligence} EQ: {traits.emotional_intelligence} Evil: {traits.evil} Selfless: {traits.selflessness} Ambition: {traits.ambition} Combat: {traits.combat_skill} Political: {traits.political_cunning} Religion: {traits.religious_devotion} {relationshipText}\n          </div>\n          <div className=\"npc-line-2\">\n            🌍 {npc.location || 'Unknown'} 🟢 {npc.status} Current_Behavior: {npc.current_action || npc.current_behavior || 'Idle'}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const getGroupedStats = () => {\n    const houseStats = {};\n    const genderStats = {};\n    const locationStats = {};\n    \n    npcs.forEach(npc => {\n      const house = npc.house.replace('House ', '');\n      houseStats[house] = (houseStats[house] || 0) + 1;\n      genderStats[npc.gender] = (genderStats[npc.gender] || 0) + 1;\n      const location = npc.location || 'Unknown';\n      locationStats[location] = (locationStats[location] || 0) + 1;\n    });\n    \n    return { houseStats, genderStats, locationStats };\n  };\n\n  const { houseStats, genderStats, locationStats } = getGroupedStats();\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Live NPC Engine</h1>\n        <div className=\"header-buttons\">\n          <button onClick={loadWorldQuest} className=\"load-btn\">\n            📜 Load World Quest\n          </button>\n          <button onClick={loadPersona} className=\"load-btn\">\n            👥 Load Persona\n          </button>\n          <button onClick={restartWorld} className=\"restart-btn\">\n            🔄 Restart World\n          </button>\n          <button onClick={() => setShowConfig(true)} className=\"config-btn\">\n            ⚙️ AI Engine Config\n          </button>\n        </div>\n      </header>\n\n      {showConfig && (\n        <div className=\"config-modal\">\n          <div className=\"config-content\">\n            <h3>AI Engine Configuration</h3>\n            <div className=\"config-form\">\n              <div className=\"config-field\">\n                <label>Cerebras API Key:</label>\n                <input\n                  type=\"password\"\n                  value={apiConfig.apiKey}\n                  onChange={(e) => setApiConfig({...apiConfig, apiKey: e.target.value})}\n                  placeholder=\"Enter your Cerebras API key\"\n                  className=\"config-input\"\n                />\n              </div>\n              <div className=\"config-field\">\n                <label>API URL:</label>\n                <input\n                  type=\"text\"\n                  value={apiConfig.apiUrl}\n                  onChange={(e) => setApiConfig({...apiConfig, apiUrl: e.target.value})}\n                  className=\"config-input\"\n                />\n              </div>\n              <div className=\"config-field\">\n                <label>Model Name:</label>\n                <select\n                  value={apiConfig.modelName}\n                  onChange={(e) => setApiConfig({...apiConfig, modelName: e.target.value})}\n                  className=\"config-select\"\n                >\n                  <option value=\"qwen-3-coder-480b\">Qwen 3 Coder 480B (Default)</option>\n                  <option value=\"qwen-3-235b-a22b-instruct-2507\">Qwen 3 235B A22B Instruct 2507</option>\n                  <option value=\"qwen-3-235b-a22b-thinking-2507\">Qwen 3 235B A22B Thinking 2507</option>\n                  <option value=\"llama-3.3-70b\">Llama 3.3 70B</option>\n                  <option value=\"qwen-3-32b\">Qwen 3 32B</option>\n                  <option value=\"deepseek-r1-distill-llama-70b\">DeepSeek R1 Distill Llama 70B</option>\n                </select>\n              </div>\n              <div className=\"config-status\">\n                {apiConfig.apiKey ? (\n                  <span className=\"status-connected\">🟢 API Key Configured</span>\n                ) : (\n                  <span className=\"status-disconnected\">🔴 API Key Required</span>\n                )}\n              </div>\n            </div>\n            <div className=\"config-buttons\">\n              <button onClick={() => setShowConfig(false)} className=\"config-save-btn\">\n                Save & Close\n              </button>\n              <button onClick={() => setShowConfig(false)} className=\"config-cancel-btn\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"main-content\">\n        <div className=\"left-panel\">\n          <h2>NPCs ({npcs.length})</h2>\n          \n          <div className=\"stats-display\">\n            <div className=\"stat-group\">\n              <strong>Houses:</strong> {Object.entries(houseStats).map(([house, count]) => `${house}(${count})`).join(', ')}\n            </div>\n            <div className=\"stat-group\">\n              <strong>Gender:</strong> {Object.entries(genderStats).map(([gender, count]) => `${gender}(${count})`).join(', ')}\n            </div>\n            <div className=\"stat-group\">\n              <strong>Locations:</strong> {Object.entries(locationStats).map(([location, count]) => `${location}(${count})`).join(', ')}\n            </div>\n            <div className=\"stat-group rate-limit-status\">\n              <strong>API Usage:</strong> \n              <span className={rateLimitError ? 'rate-limit-error' : apiCallCount >= 7 ? 'rate-limit-warning' : 'rate-limit-ok'}>\n                {apiCallCount}/10 calls this minute\n              </span>\n              {rateLimitError && (\n                <span className=\"rate-limit-message\"> ⚠️ Rate limit reached - using simulation mode</span>\n              )}\n            </div>\n          </div>\n          \n          <div className={`npc-list ${flashAnimation ? 'flash-animation' : ''}`}>\n            {npcs.map(npc => formatNPCDisplay(npc))}\n          </div>\n        </div>\n\n        <div className=\"right-panel\">\n          <div className=\"world-events-section\">\n            <h3>World Events</h3>\n            \n            <div className=\"event-controls\">\n              <div className=\"timer-controls\">\n                <label>\n                  Auto Timer: \n                  <input \n                    type=\"number\" \n                    value={timerInterval} \n                    onChange={(e) => setTimerInterval(parseInt(e.target.value))}\n                    min=\"5\"\n                    max=\"300\"\n                  /> sec\n                </label>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button onClick={() => {\n                  if (currentEventIndex === 0) {\n                    processNextEvent();\n                  }\n                }} className=\"manual-start-btn\">\n                  🚀 Manual Start Event\n                </button>\n                \n                {!isAutoRunning ? (\n                  <button onClick={startAutoRun} className=\"start-btn\">\n                    ▶️ Auto Events\n                  </button>\n                ) : (\n                  <button onClick={stopAutoRun} className=\"stop-btn\">\n                    ⏸️ Pause Auto\n                  </button>\n                )}\n                \n                <button onClick={processNextEvent} className=\"next-btn\">\n                  ⏭️ Next Event\n                </button>\n              </div>\n              \n              <div className=\"custom-event\">\n                <input \n                  type=\"text\" \n                  placeholder=\"Custom event...\"\n                  value={customEvent}\n                  onChange={(e) => setCustomEvent(e.target.value)}\n                  className=\"custom-event-input\"\n                />\n                <button onClick={sendCustomEvent} className=\"send-btn\">\n                  📤 Send\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"events-stack\" style={{ position: 'relative' }}>\n              {isProcessingEvent && (\n                <div className=\"loading-overlay\">\n                  <div className=\"loading-spinner\"></div>\n                  <div className=\"loading-text\">Executing World Event...</div>\n                </div>\n              )}\n              {worldEvents.map((event, index) => {\n                let statusClass = 'event-pending';\n                if (index < currentEventIndex) {\n                  statusClass = 'event-completed';\n                } else if (index === currentEventIndex) {\n                  statusClass = 'event-running';\n                }\n                \n                return (\n                  <div key={event.event_id} className={`event-card-stack ${statusClass}`}>\n                    <div className=\"event-header\">\n                      <span className=\"event-number\">#{event.event_id}</span>\n                      <span className=\"event-status-indicator\">\n                        {index < currentEventIndex ? '✅' : index === currentEventIndex ? '🔄' : '⏳'}\n                      </span>\n                    </div>\n                    <div className=\"event-title\">{event.title}</div>\n                    <div className=\"event-description\">{event.description}</div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}