{"ast":null,"code":"class AIService {\n  constructor() {\n    this.rateLimitHandler = null;\n  }\n  setRateLimitHandler(handler) {\n    this.rateLimitHandler = handler;\n  }\n  async updateAllNPCsWithAI(npcsArray, event, apiConfig) {\n    const {\n      apiKey,\n      apiUrl,\n      modelName\n    } = apiConfig;\n    if (!apiKey || apiKey.trim() === '') {\n      console.warn('Cerebras API key not configured. Using fallback simulation.');\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n\n    // Check rate limit before making API call\n    if (this.rateLimitHandler && !this.rateLimitHandler.checkRateLimit()) {\n      console.warn(`Rate limit reached. Using simulation for all NPCs`);\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n    const prompt = this.buildPrompt(npcsArray, event);\n    try {\n      console.log('Calling Cerebras API with model:', modelName, 'for', npcsArray.length, 'NPCs');\n\n      // Increment rate limit counter\n      if (this.rateLimitHandler) {\n        this.rateLimitHandler.incrementCallCount();\n      }\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: modelName,\n          messages: [{\n            role: \"system\",\n            content: \"You are an expert Game of Thrones NPC simulation engine. Always respond with valid JSON array only.\"\n          }, {\n            role: \"user\",\n            content: prompt\n          }],\n          temperature: 0.7,\n          max_completion_tokens: 8000,\n          top_p: 0.8,\n          stream: false\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n\n        // Handle rate limit specifically\n        if (response.status === 429) {\n          console.error('Rate limit exceeded! Switching to simulation mode.');\n          if (this.rateLimitHandler) {\n            this.rateLimitHandler.setRateLimitError(true);\n          }\n          return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n        }\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n      const responseData = await response.json();\n      const aiResponse = responseData.choices[0].message.content;\n\n      // Parse the AI response as JSON\n      try {\n        const updatedNpcs = JSON.parse(aiResponse);\n        // Validate that it's an array and has the right length\n        if (Array.isArray(updatedNpcs) && updatedNpcs.length === npcsArray.length) {\n          return updatedNpcs;\n        } else {\n          throw new Error('Invalid NPC array structure returned by AI');\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response as JSON:', parseError);\n        console.log('AI Response:', aiResponse);\n        return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n      }\n    } catch (error) {\n      console.error('Error calling Cerebras API:', error);\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n  }\n  buildPrompt(npcsArray, event) {\n    return `You are an expert AI agent simulating NPC evolution in a Game of Thrones universe. Update ALL NPCs in the dataset based on the world event, ensuring changes align with Westerosi lore, politics, and character archetypes. Use the empirical formula: NPC Persona (with current action) × World Event = New Action + Change in Persona.\n\nNPC Dataset (JSON schema-compliant):\n${JSON.stringify(npcsArray, null, 2)}\n\nWorld Event:\n${event.title} - ${event.description}\n\nReason step by step:\n1. Assess impact: How does the event affect EACH NPC's house, role, location, status, traits, and relationships? Factor in traits (e.g., high evil amplifies malice, low loyalty risks defection).\n2. New Action: Craft a concise natural language description of updated mood/actions for each NPC, grounded in lore. Use 'current_action' field instead of 'current_behavior'.\n3. Persona Changes: Adjust traits by -20 to +20 max (subtle shifts); modify relationship strengths by -30 to +30 or add/remove if logical; update location/status only if directly implied.\n4. Consistency: Avoid drastic overhauls—events ripple, not revolutionize. Preserve JSON schema integrity.\n5. Process the ENTIRE dataset as a cohesive world where NPCs may interact and influence each other.\n\nOutput ONLY the updated NPC dataset as a JSON array. No extra text.`;\n  }\n  simulateNPCUpdate(npc, event) {\n    // Fallback simulation when AI is not available\n    const updatedNpc = {\n      ...npc\n    };\n\n    // Simulate trait changes based on event\n    if (event.title.includes('dies') || event.title.includes('executed')) {\n      updatedNpc.traits.honor = Math.max(0, Math.min(100, updatedNpc.traits.honor + (Math.random() * 20 - 10)));\n      updatedNpc.traits.loyalty = Math.max(0, Math.min(100, updatedNpc.traits.loyalty + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Reacting to recent tragic events with ${updatedNpc.traits.honor > 70 ? 'righteous anger' : 'calculated caution'}`;\n    } else if (event.title.includes('war') || event.title.includes('battle')) {\n      updatedNpc.traits.ambition = Math.max(0, Math.min(100, updatedNpc.traits.ambition + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Preparing for the conflicts ahead with ${updatedNpc.traits.ambition > 70 ? 'eager anticipation' : 'cautious planning'}`;\n    } else {\n      updatedNpc.traits.intelligence = Math.max(0, Math.min(100, updatedNpc.traits.intelligence + (Math.random() * 10 - 5)));\n      updatedNpc.current_action = `Adapting to changing circumstances with ${updatedNpc.traits.intelligence > 70 ? 'strategic thinking' : 'careful observation'}`;\n    }\n    return updatedNpc;\n  }\n}\nexport default new AIService();","map":{"version":3,"names":["AIService","constructor","rateLimitHandler","setRateLimitHandler","handler","updateAllNPCsWithAI","npcsArray","event","apiConfig","apiKey","apiUrl","modelName","trim","console","warn","map","npc","simulateNPCUpdate","checkRateLimit","prompt","buildPrompt","log","length","incrementCallCount","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","max_completion_tokens","top_p","stream","ok","errorText","text","error","status","setRateLimitError","Error","responseData","json","aiResponse","choices","message","updatedNpcs","parse","Array","isArray","parseError","title","description","updatedNpc","includes","traits","honor","Math","max","min","random","loyalty","current_action","ambition","intelligence"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/services/aiService.js"],"sourcesContent":["class AIService {\n  constructor() {\n    this.rateLimitHandler = null;\n  }\n\n  setRateLimitHandler(handler) {\n    this.rateLimitHandler = handler;\n  }\n\n  async updateAllNPCsWithAI(npcsArray, event, apiConfig) {\n    const { apiKey, apiUrl, modelName } = apiConfig;\n\n    if (!apiKey || apiKey.trim() === '') {\n      console.warn('Cerebras API key not configured. Using fallback simulation.');\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n    \n    // Check rate limit before making API call\n    if (this.rateLimitHandler && !this.rateLimitHandler.checkRateLimit()) {\n      console.warn(`Rate limit reached. Using simulation for all NPCs`);\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n\n    const prompt = this.buildPrompt(npcsArray, event);\n\n    try {\n      console.log('Calling Cerebras API with model:', modelName, 'for', npcsArray.length, 'NPCs');\n      \n      // Increment rate limit counter\n      if (this.rateLimitHandler) {\n        this.rateLimitHandler.incrementCallCount();\n      }\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: modelName,\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are an expert Game of Thrones NPC simulation engine. Always respond with valid JSON array only.\"\n            },\n            {\n              role: \"user\",\n              content: prompt\n            }\n          ],\n          temperature: 0.7,\n          max_completion_tokens: 8000,\n          top_p: 0.8,\n          stream: false\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        \n        // Handle rate limit specifically\n        if (response.status === 429) {\n          console.error('Rate limit exceeded! Switching to simulation mode.');\n          if (this.rateLimitHandler) {\n            this.rateLimitHandler.setRateLimitError(true);\n          }\n          return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n        }\n        \n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const responseData = await response.json();\n      const aiResponse = responseData.choices[0].message.content;\n      \n      // Parse the AI response as JSON\n      try {\n        const updatedNpcs = JSON.parse(aiResponse);\n        // Validate that it's an array and has the right length\n        if (Array.isArray(updatedNpcs) && updatedNpcs.length === npcsArray.length) {\n          return updatedNpcs;\n        } else {\n          throw new Error('Invalid NPC array structure returned by AI');\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response as JSON:', parseError);\n        console.log('AI Response:', aiResponse);\n        return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n      }\n    } catch (error) {\n      console.error('Error calling Cerebras API:', error);\n      return npcsArray.map(npc => this.simulateNPCUpdate(npc, event));\n    }\n  }\n\n  buildPrompt(npcsArray, event) {\n    return `You are an expert AI agent simulating NPC evolution in a Game of Thrones universe. Update ALL NPCs in the dataset based on the world event, ensuring changes align with Westerosi lore, politics, and character archetypes. Use the empirical formula: NPC Persona (with current action) × World Event = New Action + Change in Persona.\n\nNPC Dataset (JSON schema-compliant):\n${JSON.stringify(npcsArray, null, 2)}\n\nWorld Event:\n${event.title} - ${event.description}\n\nReason step by step:\n1. Assess impact: How does the event affect EACH NPC's house, role, location, status, traits, and relationships? Factor in traits (e.g., high evil amplifies malice, low loyalty risks defection).\n2. New Action: Craft a concise natural language description of updated mood/actions for each NPC, grounded in lore. Use 'current_action' field instead of 'current_behavior'.\n3. Persona Changes: Adjust traits by -20 to +20 max (subtle shifts); modify relationship strengths by -30 to +30 or add/remove if logical; update location/status only if directly implied.\n4. Consistency: Avoid drastic overhauls—events ripple, not revolutionize. Preserve JSON schema integrity.\n5. Process the ENTIRE dataset as a cohesive world where NPCs may interact and influence each other.\n\nOutput ONLY the updated NPC dataset as a JSON array. No extra text.`;\n  }\n\n  simulateNPCUpdate(npc, event) {\n    // Fallback simulation when AI is not available\n    const updatedNpc = { ...npc };\n    \n    // Simulate trait changes based on event\n    if (event.title.includes('dies') || event.title.includes('executed')) {\n      updatedNpc.traits.honor = Math.max(0, Math.min(100, updatedNpc.traits.honor + (Math.random() * 20 - 10)));\n      updatedNpc.traits.loyalty = Math.max(0, Math.min(100, updatedNpc.traits.loyalty + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Reacting to recent tragic events with ${updatedNpc.traits.honor > 70 ? 'righteous anger' : 'calculated caution'}`;\n    } else if (event.title.includes('war') || event.title.includes('battle')) {\n      updatedNpc.traits.ambition = Math.max(0, Math.min(100, updatedNpc.traits.ambition + (Math.random() * 15 - 5)));\n      updatedNpc.current_action = `Preparing for the conflicts ahead with ${updatedNpc.traits.ambition > 70 ? 'eager anticipation' : 'cautious planning'}`;\n    } else {\n      updatedNpc.traits.intelligence = Math.max(0, Math.min(100, updatedNpc.traits.intelligence + (Math.random() * 10 - 5)));\n      updatedNpc.current_action = `Adapting to changing circumstances with ${updatedNpc.traits.intelligence > 70 ? 'strategic thinking' : 'careful observation'}`;\n    }\n\n    return updatedNpc;\n  }\n}\n\nexport default new AIService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}