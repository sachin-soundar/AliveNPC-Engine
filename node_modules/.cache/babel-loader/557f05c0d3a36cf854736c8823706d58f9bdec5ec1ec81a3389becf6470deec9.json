{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nconst useRateLimit = () => {\n  _s();\n  const [rateLimitError, setRateLimitError] = useState(false);\n  const [apiCallCount, setApiCallCount] = useState(0);\n  const [lastResetTime, setLastResetTime] = useState(Date.now());\n  const rateLimitRef = useRef({\n    calls: 0,\n    resetTime: Date.now()\n  });\n  const checkRateLimit = () => {\n    const now = Date.now();\n    const oneMinute = 60 * 1000;\n\n    // Reset counter every minute\n    if (now - rateLimitRef.current.resetTime > oneMinute) {\n      rateLimitRef.current.calls = 0;\n      rateLimitRef.current.resetTime = now;\n      setApiCallCount(0);\n      setLastResetTime(now);\n      setRateLimitError(false);\n    }\n\n    // Check if we're at the limit (9 calls to leave buffer)\n    if (rateLimitRef.current.calls >= 9) {\n      setRateLimitError(true);\n      return false;\n    }\n    return true;\n  };\n  const incrementCallCount = () => {\n    rateLimitRef.current.calls++;\n    setApiCallCount(rateLimitRef.current.calls);\n  };\n  const resetRateLimit = () => {\n    rateLimitRef.current.calls = 0;\n    rateLimitRef.current.resetTime = Date.now();\n    setApiCallCount(0);\n    setLastResetTime(Date.now());\n    setRateLimitError(false);\n  };\n  return {\n    rateLimitError,\n    apiCallCount,\n    lastResetTime,\n    checkRateLimit,\n    incrementCallCount,\n    resetRateLimit\n  };\n};\n_s(useRateLimit, \"mEaKhNnsIPK1pexR5JIAqgYXWuI=\");\nexport default useRateLimit;","map":{"version":3,"names":["useState","useRef","useRateLimit","_s","rateLimitError","setRateLimitError","apiCallCount","setApiCallCount","lastResetTime","setLastResetTime","Date","now","rateLimitRef","calls","resetTime","checkRateLimit","oneMinute","current","incrementCallCount","resetRateLimit"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/hooks/useRateLimit.js"],"sourcesContent":["import { useState, useRef } from 'react';\n\nconst useRateLimit = () => {\n  const [rateLimitError, setRateLimitError] = useState(false);\n  const [apiCallCount, setApiCallCount] = useState(0);\n  const [lastResetTime, setLastResetTime] = useState(Date.now());\n  const rateLimitRef = useRef({ calls: 0, resetTime: Date.now() });\n\n  const checkRateLimit = () => {\n    const now = Date.now();\n    const oneMinute = 60 * 1000;\n    \n    // Reset counter every minute\n    if (now - rateLimitRef.current.resetTime > oneMinute) {\n      rateLimitRef.current.calls = 0;\n      rateLimitRef.current.resetTime = now;\n      setApiCallCount(0);\n      setLastResetTime(now);\n      setRateLimitError(false);\n    }\n    \n    // Check if we're at the limit (9 calls to leave buffer)\n    if (rateLimitRef.current.calls >= 9) {\n      setRateLimitError(true);\n      return false;\n    }\n    \n    return true;\n  };\n\n  const incrementCallCount = () => {\n    rateLimitRef.current.calls++;\n    setApiCallCount(rateLimitRef.current.calls);\n  };\n\n  const resetRateLimit = () => {\n    rateLimitRef.current.calls = 0;\n    rateLimitRef.current.resetTime = Date.now();\n    setApiCallCount(0);\n    setLastResetTime(Date.now());\n    setRateLimitError(false);\n  };\n\n  return {\n    rateLimitError,\n    apiCallCount,\n    lastResetTime,\n    checkRateLimit,\n    incrementCallCount,\n    resetRateLimit\n  };\n};\n\nexport default useRateLimit;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAACU,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;EAC9D,MAAMC,YAAY,GAAGX,MAAM,CAAC;IAAEY,KAAK,EAAE,CAAC;IAAEC,SAAS,EAAEJ,IAAI,CAACC,GAAG,CAAC;EAAE,CAAC,CAAC;EAEhE,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMJ,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IACtB,MAAMK,SAAS,GAAG,EAAE,GAAG,IAAI;;IAE3B;IACA,IAAIL,GAAG,GAAGC,YAAY,CAACK,OAAO,CAACH,SAAS,GAAGE,SAAS,EAAE;MACpDJ,YAAY,CAACK,OAAO,CAACJ,KAAK,GAAG,CAAC;MAC9BD,YAAY,CAACK,OAAO,CAACH,SAAS,GAAGH,GAAG;MACpCJ,eAAe,CAAC,CAAC,CAAC;MAClBE,gBAAgB,CAACE,GAAG,CAAC;MACrBN,iBAAiB,CAAC,KAAK,CAAC;IAC1B;;IAEA;IACA,IAAIO,YAAY,CAACK,OAAO,CAACJ,KAAK,IAAI,CAAC,EAAE;MACnCR,iBAAiB,CAAC,IAAI,CAAC;MACvB,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC;EAED,MAAMa,kBAAkB,GAAGA,CAAA,KAAM;IAC/BN,YAAY,CAACK,OAAO,CAACJ,KAAK,EAAE;IAC5BN,eAAe,CAACK,YAAY,CAACK,OAAO,CAACJ,KAAK,CAAC;EAC7C,CAAC;EAED,MAAMM,cAAc,GAAGA,CAAA,KAAM;IAC3BP,YAAY,CAACK,OAAO,CAACJ,KAAK,GAAG,CAAC;IAC9BD,YAAY,CAACK,OAAO,CAACH,SAAS,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC;IAC3CJ,eAAe,CAAC,CAAC,CAAC;IAClBE,gBAAgB,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IAC5BN,iBAAiB,CAAC,KAAK,CAAC;EAC1B,CAAC;EAED,OAAO;IACLD,cAAc;IACdE,YAAY;IACZE,aAAa;IACbO,cAAc;IACdG,kBAAkB;IAClBC;EACF,CAAC;AACH,CAAC;AAAChB,EAAA,CAjDID,YAAY;AAmDlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}