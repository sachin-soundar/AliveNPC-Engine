{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win10\\\\Documents\\\\GitHub\\\\AliveNPC-Engine\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport './App.css';\n\n// Components\nimport { Header, NPCList, WorldEvents, ConfigModal, LoadingOverlay } from './components';\n\n// Hooks\nimport { useNPCData, useWorldEvents, useAPIConfig, useRateLimit, useAutoRun } from './hooks';\n\n// Services\nimport { aiService } from './services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Custom hooks for state management\n  const {\n    npcs,\n    previousNpcs,\n    flashAnimation,\n    loadPersona,\n    loadDefaultData,\n    updateNPCs,\n    resetNPCs\n  } = useNPCData();\n  const {\n    worldEvents,\n    currentEventIndex,\n    customEvent,\n    setCustomEvent,\n    loadWorldQuests,\n    loadDefaultEvents,\n    restartWorld,\n    processNextEvent: baseProcessNextEvent,\n    sendCustomEvent\n  } = useWorldEvents();\n  const {\n    apiConfig,\n    updateConfig,\n    isConfigured\n  } = useAPIConfig();\n  const rateLimit = useRateLimit();\n  const [showConfigModal, setShowConfigModal] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [loadingMessage, setLoadingMessage] = React.useState('');\n\n  // Enhanced processNextEvent function that integrates AI service\n  const processNextEvent = async () => {\n    if (currentEventIndex >= worldEvents.length) {\n      console.log('No more events to process');\n      return;\n    }\n    const currentEvent = worldEvents[currentEventIndex];\n    setIsLoading(true);\n    setLoadingMessage(`Processing: ${currentEvent.title}`);\n    try {\n      const updatedNpcs = await aiService.updateAllNPCsWithAI(npcs, currentEvent, apiConfig);\n      updateNPCs(updatedNpcs);\n      baseProcessNextEvent();\n    } catch (error) {\n      console.error('Error processing event:', error);\n    } finally {\n      setIsLoading(false);\n      setLoadingMessage('');\n    }\n  };\n\n  // Enhanced handleCustomEvent function\n  const handleCustomEvent = async (immediate = false) => {\n    if (!customEvent.trim()) return;\n    const event = {\n      event_id: Date.now(),\n      title: \"Custom Event\",\n      description: customEvent,\n      impact_level: \"Custom\"\n    };\n    if (immediate) {\n      setIsLoading(true);\n      setLoadingMessage('Processing custom event...');\n      try {\n        const updatedNpcs = await aiService.updateAllNPCsWithAI(npcs, event, apiConfig);\n        updateNPCs(updatedNpcs);\n        sendCustomEvent(event, true); // immediate = true\n        setCustomEvent(''); // Clear the input\n      } catch (error) {\n        console.error('Error processing custom event:', error);\n      } finally {\n        setIsLoading(false);\n        setLoadingMessage('');\n      }\n    } else {\n      // Just add to queue without processing\n      sendCustomEvent(event, false); // immediate = false\n      setCustomEvent(''); // Clear the input\n    }\n  };\n\n  // Auto-run functionality\n  const autoRun = useAutoRun(processNextEvent);\n\n  // Cleanup auto-run on unmount\n  useEffect(() => {\n    return () => autoRun.cleanup();\n  }, [autoRun]);\n\n  // Load environment variables on component mount\n  useEffect(() => {\n    const envApiKey = process.env.REACT_APP_CEREBRAS_API_KEY;\n    const envApiUrl = process.env.REACT_APP_CEREBRAS_API_URL;\n    const envModelName = process.env.REACT_APP_MODEL_NAME;\n    if (envApiKey || envApiUrl || envModelName) {\n      updateConfig({\n        apiKey: envApiKey || '',\n        apiUrl: envApiUrl || 'https://api.cerebras.ai/v1/chat/completions',\n        modelName: envModelName || 'qwen-3-coder-480b'\n      });\n    }\n  }, []);\n\n  // Load default data on component mount\n  useEffect(() => {\n    loadDefaultData();\n  }, [loadDefaultData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onLoadWorldQuest: loadWorldQuests,\n      onLoadPersona: loadPersona,\n      onRestartWorld: () => {\n        restartWorld();\n        resetNPCs();\n      },\n      onShowConfig: () => setShowConfigModal(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(NPCList, {\n        npcs: npcs,\n        previousNpcs: previousNpcs,\n        flashAnimation: flashAnimation,\n        rateLimit: rateLimit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WorldEvents, {\n        worldEvents: worldEvents,\n        currentEventIndex: currentEventIndex,\n        customEvent: customEvent,\n        setCustomEvent: setCustomEvent,\n        onProcessNext: processNextEvent,\n        onSendCustom: handleCustomEvent,\n        autoRun: autoRun\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), showConfigModal && /*#__PURE__*/_jsxDEV(ConfigModal, {\n      apiConfig: apiConfig,\n      onUpdateConfig: updateConfig,\n      onClose: () => setShowConfigModal(false),\n      isConfigured: isConfigured()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {\n      message: loadingMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"UzlZ2FyEJqW9KMimMO2u19CP1wE=\", false, function () {\n  return [useNPCData, useWorldEvents, useAPIConfig, useRateLimit, useAutoRun];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","Header","NPCList","WorldEvents","ConfigModal","LoadingOverlay","useNPCData","useWorldEvents","useAPIConfig","useRateLimit","useAutoRun","aiService","jsxDEV","_jsxDEV","App","_s","npcs","previousNpcs","flashAnimation","loadPersona","loadDefaultData","updateNPCs","resetNPCs","worldEvents","currentEventIndex","customEvent","setCustomEvent","loadWorldQuests","loadDefaultEvents","restartWorld","processNextEvent","baseProcessNextEvent","sendCustomEvent","apiConfig","updateConfig","isConfigured","rateLimit","showConfigModal","setShowConfigModal","useState","isLoading","setIsLoading","loadingMessage","setLoadingMessage","length","console","log","currentEvent","title","updatedNpcs","updateAllNPCsWithAI","error","handleCustomEvent","immediate","trim","event","event_id","Date","now","description","impact_level","autoRun","cleanup","envApiKey","process","env","REACT_APP_CEREBRAS_API_KEY","envApiUrl","REACT_APP_CEREBRAS_API_URL","envModelName","REACT_APP_MODEL_NAME","apiKey","apiUrl","modelName","className","children","onLoadWorldQuest","onLoadPersona","onRestartWorld","onShowConfig","fileName","_jsxFileName","lineNumber","columnNumber","onProcessNext","onSendCustom","onUpdateConfig","onClose","message","_c","$RefreshReg$"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\n// Components\nimport { \n  Header, \n  NPCList, \n  WorldEvents, \n  ConfigModal, \n  LoadingOverlay \n} from './components';\n\n// Hooks\nimport { \n  useNPCData, \n  useWorldEvents, \n  useAPIConfig, \n  useRateLimit, \n  useAutoRun \n} from './hooks';\n\n// Services\nimport { aiService } from './services';\n\nconst App = () => {\n  // Custom hooks for state management\n  const { \n    npcs, \n    previousNpcs, \n    flashAnimation, \n    loadPersona, \n    loadDefaultData, \n    updateNPCs,\n    resetNPCs \n  } = useNPCData();\n  \n  const { \n    worldEvents, \n    currentEventIndex, \n    customEvent, \n    setCustomEvent,\n    loadWorldQuests, \n    loadDefaultEvents, \n    restartWorld, \n    processNextEvent: baseProcessNextEvent, \n    sendCustomEvent \n  } = useWorldEvents();\n  \n  const { apiConfig, updateConfig, isConfigured } = useAPIConfig();\n  const rateLimit = useRateLimit();\n  const [showConfigModal, setShowConfigModal] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [loadingMessage, setLoadingMessage] = React.useState('');\n\n  // Enhanced processNextEvent function that integrates AI service\n  const processNextEvent = async () => {\n    if (currentEventIndex >= worldEvents.length) {\n      console.log('No more events to process');\n      return;\n    }\n\n    const currentEvent = worldEvents[currentEventIndex];\n    setIsLoading(true);\n    setLoadingMessage(`Processing: ${currentEvent.title}`);\n    \n    try {\n      const updatedNpcs = await aiService.updateAllNPCsWithAI(npcs, currentEvent, apiConfig);\n      updateNPCs(updatedNpcs);\n      baseProcessNextEvent();\n    } catch (error) {\n      console.error('Error processing event:', error);\n    } finally {\n      setIsLoading(false);\n      setLoadingMessage('');\n    }\n  };\n\n  // Enhanced handleCustomEvent function\n  const handleCustomEvent = async (immediate = false) => {\n    if (!customEvent.trim()) return;\n    \n    const event = {\n      event_id: Date.now(),\n      title: \"Custom Event\",\n      description: customEvent,\n      impact_level: \"Custom\"\n    };\n    \n    if (immediate) {\n      setIsLoading(true);\n      setLoadingMessage('Processing custom event...');\n      \n      try {\n        const updatedNpcs = await aiService.updateAllNPCsWithAI(npcs, event, apiConfig);\n        updateNPCs(updatedNpcs);\n        sendCustomEvent(event, true); // immediate = true\n        setCustomEvent(''); // Clear the input\n      } catch (error) {\n        console.error('Error processing custom event:', error);\n      } finally {\n        setIsLoading(false);\n        setLoadingMessage('');\n      }\n    } else {\n      // Just add to queue without processing\n      sendCustomEvent(event, false); // immediate = false\n      setCustomEvent(''); // Clear the input\n    }\n  };\n\n  // Auto-run functionality\n  const autoRun = useAutoRun(processNextEvent);\n  \n  // Cleanup auto-run on unmount\n  useEffect(() => {\n    return () => autoRun.cleanup();\n  }, [autoRun]);\n\n  // Load environment variables on component mount\n  useEffect(() => {\n    const envApiKey = process.env.REACT_APP_CEREBRAS_API_KEY;\n    const envApiUrl = process.env.REACT_APP_CEREBRAS_API_URL;\n    const envModelName = process.env.REACT_APP_MODEL_NAME;\n    \n    if (envApiKey || envApiUrl || envModelName) {\n      updateConfig({\n        apiKey: envApiKey || '',\n        apiUrl: envApiUrl || 'https://api.cerebras.ai/v1/chat/completions',\n        modelName: envModelName || 'qwen-3-coder-480b'\n      });\n    }\n  }, []);\n\n  // Load default data on component mount\n  useEffect(() => {\n    loadDefaultData();\n  }, [loadDefaultData]);\n\n  return (\n    <div className=\"App\">\n      <Header \n        onLoadWorldQuest={loadWorldQuests}\n        onLoadPersona={loadPersona}\n        onRestartWorld={() => {\n          restartWorld();\n          resetNPCs();\n        }}\n        onShowConfig={() => setShowConfigModal(true)}\n      />\n      \n      <div className=\"main-content\">\n        <NPCList \n          npcs={npcs}\n          previousNpcs={previousNpcs}\n          flashAnimation={flashAnimation}\n          rateLimit={rateLimit}\n        />\n        \n        <WorldEvents \n          worldEvents={worldEvents}\n          currentEventIndex={currentEventIndex}\n          customEvent={customEvent}\n          setCustomEvent={setCustomEvent}\n          onProcessNext={processNextEvent}\n          onSendCustom={handleCustomEvent}\n          autoRun={autoRun}\n        />\n      </div>\n      \n      {showConfigModal && (\n        <ConfigModal \n          apiConfig={apiConfig}\n          onUpdateConfig={updateConfig}\n          onClose={() => setShowConfigModal(false)}\n          isConfigured={isConfigured()}\n        />\n      )}\n      \n      {isLoading && (\n        <LoadingOverlay message={loadingMessage} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}