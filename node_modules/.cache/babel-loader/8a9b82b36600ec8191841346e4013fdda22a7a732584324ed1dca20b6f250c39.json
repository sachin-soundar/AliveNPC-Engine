{"ast":null,"code":"import{useState,useCallback}from'react';const useNPCData=()=>{const[npcs,setNpcs]=useState([]);const[previousNpcs,setPreviousNpcs]=useState([]);const[flashAnimation,setFlashAnimation]=useState(false);const loadSampleData=useCallback(()=>{const sampleNpcs=[{id:\"stark_001\",name:\"Ser Gareth of House Stark\",house:\"Stark\",age:34,gender:\"male\",role:\"knight\",traits:{honor:82,loyalty:88,intelligence:65,emotional_intelligence:70,evil:12,selflessness:75,ambition:35,combat_skill:80,political_cunning:45,religious_devotion:65},relationships:[{npc_id:\"stark_002\",relationship_type:\"family\",strength:90},{npc_id:\"stark_015\",relationship_type:\"ally\",strength:75}],current_behavior:\"Patrolling the borders with quiet determination\",location:\"Winterfell\",status:\"alive\"}];setNpcs(sampleNpcs);},[]);const loadPersona=useCallback(async()=>{try{let npcResponse;try{npcResponse=await fetch('/dataset/npcs_30.json');}catch{try{npcResponse=await fetch('/dataset/npcs_100.json');}catch{npcResponse=await fetch('/dataset/npcs_300.json');}}const npcData=await npcResponse.json();setNpcs(npcData.npcs||npcData||[]);console.log('Persona data loaded successfully');}catch(error){console.error('Error loading persona data:',error);alert('Failed to load Persona data. Please check if NPC files exist.');}},[]);const loadDefaultData=useCallback(async()=>{try{const npcResponse=await fetch('/dataset/npcs_30.json');const npcData=await npcResponse.json();setNpcs(npcData.npcs||[]);}catch(error){console.error('Error loading default data:',error);loadSampleData();}},[loadSampleData]);const updateNPCs=useCallback(newNpcs=>{setPreviousNpcs([...npcs]);setNpcs(newNpcs);setFlashAnimation(true);setTimeout(()=>setFlashAnimation(false),1000);},[npcs]);return{npcs,previousNpcs,flashAnimation,loadPersona,loadDefaultData,updateNPCs};};export default useNPCData;","map":{"version":3,"names":["useState","useCallback","useNPCData","npcs","setNpcs","previousNpcs","setPreviousNpcs","flashAnimation","setFlashAnimation","loadSampleData","sampleNpcs","id","name","house","age","gender","role","traits","honor","loyalty","intelligence","emotional_intelligence","evil","selflessness","ambition","combat_skill","political_cunning","religious_devotion","relationships","npc_id","relationship_type","strength","current_behavior","location","status","loadPersona","npcResponse","fetch","npcData","json","console","log","error","alert","loadDefaultData","updateNPCs","newNpcs","setTimeout"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/hooks/useNPCData.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useNPCData = () => {\n  const [npcs, setNpcs] = useState([]);\n  const [previousNpcs, setPreviousNpcs] = useState([]);\n  const [flashAnimation, setFlashAnimation] = useState(false);\n\n  const loadSampleData = useCallback(() => {\n    const sampleNpcs = [\n      {\n        id: \"stark_001\",\n        name: \"Ser Gareth of House Stark\",\n        house: \"Stark\",\n        age: 34,\n        gender: \"male\",\n        role: \"knight\",\n        traits: {\n          honor: 82,\n          loyalty: 88,\n          intelligence: 65,\n          emotional_intelligence: 70,\n          evil: 12,\n          selflessness: 75,\n          ambition: 35,\n          combat_skill: 80,\n          political_cunning: 45,\n          religious_devotion: 65\n        },\n        relationships: [\n          { npc_id: \"stark_002\", relationship_type: \"family\", strength: 90 },\n          { npc_id: \"stark_015\", relationship_type: \"ally\", strength: 75 }\n        ],\n        current_behavior: \"Patrolling the borders with quiet determination\",\n        location: \"Winterfell\",\n        status: \"alive\"\n      }\n    ];\n    setNpcs(sampleNpcs);\n  }, []);\n\n  const loadPersona = useCallback(async () => {\n    try {\n      let npcResponse;\n      try {\n        npcResponse = await fetch('/dataset/npcs_30.json');\n      } catch {\n        try {\n          npcResponse = await fetch('/dataset/npcs_100.json');\n        } catch {\n          npcResponse = await fetch('/dataset/npcs_300.json');\n        }\n      }\n      const npcData = await npcResponse.json();\n      setNpcs(npcData.npcs || npcData || []);\n      console.log('Persona data loaded successfully');\n    } catch (error) {\n      console.error('Error loading persona data:', error);\n      alert('Failed to load Persona data. Please check if NPC files exist.');\n    }\n  }, []);\n\n  const loadDefaultData = useCallback(async () => {\n    try {\n      const npcResponse = await fetch('/dataset/npcs_30.json');\n      const npcData = await npcResponse.json();\n      setNpcs(npcData.npcs || []);\n    } catch (error) {\n      console.error('Error loading default data:', error);\n      loadSampleData();\n    }\n  }, [loadSampleData]);\n\n  const updateNPCs = useCallback((newNpcs) => {\n    setPreviousNpcs([...npcs]);\n    setNpcs(newNpcs);\n    setFlashAnimation(true);\n    setTimeout(() => setFlashAnimation(false), 1000);\n  }, [npcs]);\n\n  return {\n    npcs,\n    previousNpcs,\n    flashAnimation,\n    loadPersona,\n    loadDefaultData,\n    updateNPCs\n  };\n};\n\nexport default useNPCData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}