{"ast":null,"code":"import{useState,useRef,useCallback}from'react';const useAutoRun=processNextEvent=>{const[isAutoRunning,setIsAutoRunning]=useState(false);const[timerInterval,setTimerInterval]=useState(15);const intervalRef=useRef(null);const startAutoRun=useCallback(()=>{setIsAutoRunning(true);intervalRef.current=setInterval(()=>{processNextEvent();},timerInterval*1000);},[processNextEvent,timerInterval]);const stopAutoRun=useCallback(()=>{setIsAutoRunning(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}},[]);const updateTimerInterval=useCallback(newInterval=>{setTimerInterval(newInterval);// If auto-run is active, restart with new interval\nif(isAutoRunning){stopAutoRun();setTimeout(()=>startAutoRun(),100);}},[isAutoRunning,startAutoRun,stopAutoRun]);// Cleanup on unmount\nconst cleanup=useCallback(()=>{if(intervalRef.current){clearInterval(intervalRef.current);}},[]);return{isAutoRunning,timerInterval,startAutoRun,stopAutoRun,updateTimerInterval,cleanup};};export default useAutoRun;","map":{"version":3,"names":["useState","useRef","useCallback","useAutoRun","processNextEvent","isAutoRunning","setIsAutoRunning","timerInterval","setTimerInterval","intervalRef","startAutoRun","current","setInterval","stopAutoRun","clearInterval","updateTimerInterval","newInterval","setTimeout","cleanup"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/hooks/useAutoRun.js"],"sourcesContent":["import { useState, useRef, useCallback } from 'react';\n\nconst useAutoRun = (processNextEvent) => {\n  const [isAutoRunning, setIsAutoRunning] = useState(false);\n  const [timerInterval, setTimerInterval] = useState(15);\n  const intervalRef = useRef(null);\n\n  const startAutoRun = useCallback(() => {\n    setIsAutoRunning(true);\n    intervalRef.current = setInterval(() => {\n      processNextEvent();\n    }, timerInterval * 1000);\n  }, [processNextEvent, timerInterval]);\n\n  const stopAutoRun = useCallback(() => {\n    setIsAutoRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  const updateTimerInterval = useCallback((newInterval) => {\n    setTimerInterval(newInterval);\n    \n    // If auto-run is active, restart with new interval\n    if (isAutoRunning) {\n      stopAutoRun();\n      setTimeout(() => startAutoRun(), 100);\n    }\n  }, [isAutoRunning, startAutoRun, stopAutoRun]);\n\n  // Cleanup on unmount\n  const cleanup = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  }, []);\n\n  return {\n    isAutoRunning,\n    timerInterval,\n    startAutoRun,\n    stopAutoRun,\n    updateTimerInterval,\n    cleanup\n  };\n};\n\nexport default useAutoRun;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,MAAM,CAAEC,WAAW,KAAQ,OAAO,CAErD,KAAM,CAAAC,UAAU,CAAIC,gBAAgB,EAAK,CACvC,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACO,aAAa,CAAEC,gBAAgB,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAAAS,WAAW,CAAGR,MAAM,CAAC,IAAI,CAAC,CAEhC,KAAM,CAAAS,YAAY,CAAGR,WAAW,CAAC,IAAM,CACrCI,gBAAgB,CAAC,IAAI,CAAC,CACtBG,WAAW,CAACE,OAAO,CAAGC,WAAW,CAAC,IAAM,CACtCR,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAEG,aAAa,CAAG,IAAI,CAAC,CAC1B,CAAC,CAAE,CAACH,gBAAgB,CAAEG,aAAa,CAAC,CAAC,CAErC,KAAM,CAAAM,WAAW,CAAGX,WAAW,CAAC,IAAM,CACpCI,gBAAgB,CAAC,KAAK,CAAC,CACvB,GAAIG,WAAW,CAACE,OAAO,CAAE,CACvBG,aAAa,CAACL,WAAW,CAACE,OAAO,CAAC,CAClCF,WAAW,CAACE,OAAO,CAAG,IAAI,CAC5B,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAI,mBAAmB,CAAGb,WAAW,CAAEc,WAAW,EAAK,CACvDR,gBAAgB,CAACQ,WAAW,CAAC,CAE7B;AACA,GAAIX,aAAa,CAAE,CACjBQ,WAAW,CAAC,CAAC,CACbI,UAAU,CAAC,IAAMP,YAAY,CAAC,CAAC,CAAE,GAAG,CAAC,CACvC,CACF,CAAC,CAAE,CAACL,aAAa,CAAEK,YAAY,CAAEG,WAAW,CAAC,CAAC,CAE9C;AACA,KAAM,CAAAK,OAAO,CAAGhB,WAAW,CAAC,IAAM,CAChC,GAAIO,WAAW,CAACE,OAAO,CAAE,CACvBG,aAAa,CAACL,WAAW,CAACE,OAAO,CAAC,CACpC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLN,aAAa,CACbE,aAAa,CACbG,YAAY,CACZG,WAAW,CACXE,mBAAmB,CACnBG,OACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAf,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}