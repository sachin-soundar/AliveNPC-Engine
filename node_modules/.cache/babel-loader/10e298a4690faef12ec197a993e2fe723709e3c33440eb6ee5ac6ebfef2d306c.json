{"ast":null,"code":"class DataService {\n  async loadNPCData(filename = 'npcs_30.json') {\n    try {\n      const response = await fetch(`/${filename}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${filename}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.npcs || data;\n    } catch (error) {\n      console.error(`Error loading NPC data from ${filename}:`, error);\n      return this.getSampleNPCs();\n    }\n  }\n  async loadWorldEvents(filename = 'world_events.json') {\n    try {\n      const response = await fetch(`/${filename}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${filename}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.events || data;\n    } catch (error) {\n      console.error(`Error loading world events from ${filename}:`, error);\n      return this.getSampleEvents();\n    }\n  }\n  async loadPersonaData() {\n    const personaFiles = ['npcs_persona_1.json', 'npcs_persona_2.json', 'npcs_persona_3.json', 'npcs_persona_4.json', 'npcs_persona_5.json'];\n    try {\n      // Try to load a random persona file\n      const randomFile = personaFiles[Math.floor(Math.random() * personaFiles.length)];\n      const response = await fetch(`/${randomFile}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${randomFile}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.npcs || data;\n    } catch (error) {\n      console.error('Error loading persona data:', error);\n      // Fallback to regular NPC data\n      return this.loadNPCData();\n    }\n  }\n  async loadWorldQuests() {\n    try {\n      const response = await fetch('/world_events.json');\n      if (!response.ok) {\n        throw new Error(`Failed to load world_events.json: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.events || data;\n    } catch (error) {\n      console.error('Error loading world quests:', error);\n      return this.getSampleEvents();\n    }\n  }\n  getSampleNPCs() {\n    return [{\n      \"id\": 1,\n      \"name\": \"Jon Snow\",\n      \"house\": \"Stark\",\n      \"title\": \"Lord Commander of the Night's Watch\",\n      \"location\": \"Castle Black\",\n      \"age\": 24,\n      \"gender\": \"Male\",\n      \"status\": \"Alive\",\n      \"traits\": {\n        \"honor\": 95,\n        \"loyalty\": 90,\n        \"intelligence\": 75,\n        \"ambition\": 60,\n        \"cruelty\": 10,\n        \"courage\": 90\n      },\n      \"relationships\": [{\n        \"character\": \"Samwell Tarly\",\n        \"relationship\": \"Best Friend\",\n        \"strength\": 95\n      }, {\n        \"character\": \"Tyrion Lannister\",\n        \"relationship\": \"Ally\",\n        \"strength\": 70\n      }, {\n        \"character\": \"Daenerys Targaryen\",\n        \"relationship\": \"Love Interest\",\n        \"strength\": 85\n      }],\n      \"current_action\": \"Defending the Wall against wildling threats while grappling with leadership responsibilities\"\n    }, {\n      \"id\": 2,\n      \"name\": \"Tyrion Lannister\",\n      \"house\": \"Lannister\",\n      \"title\": \"Hand of the Queen\",\n      \"location\": \"Dragonstone\",\n      \"age\": 39,\n      \"gender\": \"Male\",\n      \"status\": \"Alive\",\n      \"traits\": {\n        \"honor\": 70,\n        \"loyalty\": 75,\n        \"intelligence\": 98,\n        \"ambition\": 80,\n        \"cruelty\": 25,\n        \"courage\": 70\n      },\n      \"relationships\": [{\n        \"character\": \"Daenerys Targaryen\",\n        \"relationship\": \"Queen\",\n        \"strength\": 80\n      }, {\n        \"character\": \"Jon Snow\",\n        \"relationship\": \"Ally\",\n        \"strength\": 70\n      }, {\n        \"character\": \"Cersei Lannister\",\n        \"relationship\": \"Sister/Enemy\",\n        \"strength\": -80\n      }],\n      \"current_action\": \"Advising Daenerys on political strategy while managing the complexities of ruling\"\n    }, {\n      \"id\": 3,\n      \"name\": \"Arya Stark\",\n      \"house\": \"Stark\",\n      \"title\": \"No One\",\n      \"location\": \"Winterfell\",\n      \"age\": 18,\n      \"gender\": \"Female\",\n      \"status\": \"Alive\",\n      \"traits\": {\n        \"honor\": 80,\n        \"loyalty\": 95,\n        \"intelligence\": 85,\n        \"ambition\": 70,\n        \"cruelty\": 60,\n        \"courage\": 95\n      },\n      \"relationships\": [{\n        \"character\": \"Jon Snow\",\n        \"relationship\": \"Half-Brother\",\n        \"strength\": 90\n      }, {\n        \"character\": \"Sansa Stark\",\n        \"relationship\": \"Sister\",\n        \"strength\": 75\n      }, {\n        \"character\": \"The Hound\",\n        \"relationship\": \"Complicated Ally\",\n        \"strength\": 60\n      }],\n      \"current_action\": \"Training in combat while reconnecting with family and planning revenge against enemies\"\n    }];\n  }\n  getSampleEvents() {\n    return [{\n      \"id\": 1,\n      \"title\": \"The Red Wedding\",\n      \"description\": \"Robb Stark, his mother Catelyn, and many Northern lords are brutally murdered at what was supposed to be a wedding celebration. The North's rebellion is crushed.\",\n      \"impact_level\": \"Major\",\n      \"affected_houses\": [\"Stark\", \"Frey\", \"Bolton\", \"Tully\"],\n      \"political_shift\": \"Lannister victory, Northern rebellion crushed\"\n    }, {\n      \"id\": 2,\n      \"title\": \"Joffrey's Death\",\n      \"description\": \"King Joffrey Baratheon is poisoned at his own wedding feast. The realm is thrown into chaos as accusations fly.\",\n      \"impact_level\": \"Major\",\n      \"affected_houses\": [\"Baratheon\", \"Lannister\", \"Tyrell\"],\n      \"political_shift\": \"Power vacuum in King's Landing, Tommen becomes king\"\n    }, {\n      \"id\": 3,\n      \"title\": \"Dragons Return to Westeros\",\n      \"description\": \"Daenerys Targaryen arrives in Westeros with her dragons and Dothraki army, beginning her conquest to reclaim the Iron Throne.\",\n      \"impact_level\": \"Major\",\n      \"affected_houses\": [\"Targaryen\", \"Lannister\", \"All Houses\"],\n      \"political_shift\": \"New claimant to the throne, dragons return to Westeros\"\n    }];\n  }\n}\nexport default new DataService();","map":{"version":3,"names":["DataService","loadNPCData","filename","response","fetch","ok","Error","statusText","data","json","npcs","error","console","getSampleNPCs","loadWorldEvents","events","getSampleEvents","loadPersonaData","personaFiles","randomFile","Math","floor","random","length","loadWorldQuests"],"sources":["C:/Users/win10/Documents/GitHub/AliveNPC-Engine/src/services/dataService.js"],"sourcesContent":["class DataService {\n  async loadNPCData(filename = 'npcs_30.json') {\n    try {\n      const response = await fetch(`/${filename}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${filename}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.npcs || data;\n    } catch (error) {\n      console.error(`Error loading NPC data from ${filename}:`, error);\n      return this.getSampleNPCs();\n    }\n  }\n\n  async loadWorldEvents(filename = 'world_events.json') {\n    try {\n      const response = await fetch(`/${filename}`);\n      if (!response.ok) {\n        throw new Error(`Failed to load ${filename}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.events || data;\n    } catch (error) {\n      console.error(`Error loading world events from ${filename}:`, error);\n      return this.getSampleEvents();\n    }\n  }\n\n  async loadPersonaData() {\n    const personaFiles = [\n      'npcs_persona_1.json',\n      'npcs_persona_2.json', \n      'npcs_persona_3.json',\n      'npcs_persona_4.json',\n      'npcs_persona_5.json'\n    ];\n\n    try {\n      // Try to load a random persona file\n      const randomFile = personaFiles[Math.floor(Math.random() * personaFiles.length)];\n      const response = await fetch(`/${randomFile}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load ${randomFile}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.npcs || data;\n    } catch (error) {\n      console.error('Error loading persona data:', error);\n      // Fallback to regular NPC data\n      return this.loadNPCData();\n    }\n  }\n\n  async loadWorldQuests() {\n    try {\n      const response = await fetch('/world_events.json');\n      if (!response.ok) {\n        throw new Error(`Failed to load world_events.json: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.events || data;\n    } catch (error) {\n      console.error('Error loading world quests:', error);\n      return this.getSampleEvents();\n    }\n  }\n\n  getSampleNPCs() {\n    return [\n      {\n        \"id\": 1,\n        \"name\": \"Jon Snow\",\n        \"house\": \"Stark\",\n        \"title\": \"Lord Commander of the Night's Watch\",\n        \"location\": \"Castle Black\",\n        \"age\": 24,\n        \"gender\": \"Male\",\n        \"status\": \"Alive\",\n        \"traits\": {\n          \"honor\": 95,\n          \"loyalty\": 90,\n          \"intelligence\": 75,\n          \"ambition\": 60,\n          \"cruelty\": 10,\n          \"courage\": 90\n        },\n        \"relationships\": [\n          { \"character\": \"Samwell Tarly\", \"relationship\": \"Best Friend\", \"strength\": 95 },\n          { \"character\": \"Tyrion Lannister\", \"relationship\": \"Ally\", \"strength\": 70 },\n          { \"character\": \"Daenerys Targaryen\", \"relationship\": \"Love Interest\", \"strength\": 85 }\n        ],\n        \"current_action\": \"Defending the Wall against wildling threats while grappling with leadership responsibilities\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Tyrion Lannister\",\n        \"house\": \"Lannister\",\n        \"title\": \"Hand of the Queen\",\n        \"location\": \"Dragonstone\",\n        \"age\": 39,\n        \"gender\": \"Male\",\n        \"status\": \"Alive\",\n        \"traits\": {\n          \"honor\": 70,\n          \"loyalty\": 75,\n          \"intelligence\": 98,\n          \"ambition\": 80,\n          \"cruelty\": 25,\n          \"courage\": 70\n        },\n        \"relationships\": [\n          { \"character\": \"Daenerys Targaryen\", \"relationship\": \"Queen\", \"strength\": 80 },\n          { \"character\": \"Jon Snow\", \"relationship\": \"Ally\", \"strength\": 70 },\n          { \"character\": \"Cersei Lannister\", \"relationship\": \"Sister/Enemy\", \"strength\": -80 }\n        ],\n        \"current_action\": \"Advising Daenerys on political strategy while managing the complexities of ruling\"\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Arya Stark\",\n        \"house\": \"Stark\",\n        \"title\": \"No One\",\n        \"location\": \"Winterfell\",\n        \"age\": 18,\n        \"gender\": \"Female\",\n        \"status\": \"Alive\",\n        \"traits\": {\n          \"honor\": 80,\n          \"loyalty\": 95,\n          \"intelligence\": 85,\n          \"ambition\": 70,\n          \"cruelty\": 60,\n          \"courage\": 95\n        },\n        \"relationships\": [\n          { \"character\": \"Jon Snow\", \"relationship\": \"Half-Brother\", \"strength\": 90 },\n          { \"character\": \"Sansa Stark\", \"relationship\": \"Sister\", \"strength\": 75 },\n          { \"character\": \"The Hound\", \"relationship\": \"Complicated Ally\", \"strength\": 60 }\n        ],\n        \"current_action\": \"Training in combat while reconnecting with family and planning revenge against enemies\"\n      }\n    ];\n  }\n\n  getSampleEvents() {\n    return [\n      {\n        \"id\": 1,\n        \"title\": \"The Red Wedding\",\n        \"description\": \"Robb Stark, his mother Catelyn, and many Northern lords are brutally murdered at what was supposed to be a wedding celebration. The North's rebellion is crushed.\",\n        \"impact_level\": \"Major\",\n        \"affected_houses\": [\"Stark\", \"Frey\", \"Bolton\", \"Tully\"],\n        \"political_shift\": \"Lannister victory, Northern rebellion crushed\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Joffrey's Death\",\n        \"description\": \"King Joffrey Baratheon is poisoned at his own wedding feast. The realm is thrown into chaos as accusations fly.\",\n        \"impact_level\": \"Major\",\n        \"affected_houses\": [\"Baratheon\", \"Lannister\", \"Tyrell\"],\n        \"political_shift\": \"Power vacuum in King's Landing, Tommen becomes king\"\n      },\n      {\n        \"id\": 3,\n        \"title\": \"Dragons Return to Westeros\",\n        \"description\": \"Daenerys Targaryen arrives in Westeros with her dragons and Dothraki army, beginning her conquest to reclaim the Iron Throne.\",\n        \"impact_level\": \"Major\",\n        \"affected_houses\": [\"Targaryen\", \"Lannister\", \"All Houses\"],\n        \"political_shift\": \"New claimant to the throne, dragons return to Westeros\"\n      }\n    ];\n  }\n}\n\nexport default new DataService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}